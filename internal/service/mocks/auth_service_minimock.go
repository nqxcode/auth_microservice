package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/nqxcode/auth_microservice/internal/service.AuthService -o ./mocks\auth_service_minimock.go -n AuthServiceMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/nqxcode/auth_microservice/internal/model"
	"github.com/nqxcode/platform_common/pagination"
)

// AuthServiceMock implements service.AuthService
type AuthServiceMock struct {
	t minimock.Tester

	funcCreate          func(ctx context.Context, user *model.User) (i1 int64, err error)
	inspectFuncCreate   func(ctx context.Context, user *model.User)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mAuthServiceMockCreate

	funcDelete          func(ctx context.Context, id int64) (err error)
	inspectFuncDelete   func(ctx context.Context, id int64)
	afterDeleteCounter  uint64
	beforeDeleteCounter uint64
	DeleteMock          mAuthServiceMockDelete

	funcFind          func(ctx context.Context, id int64) (up1 *model.User, err error)
	inspectFuncFind   func(ctx context.Context, id int64)
	afterFindCounter  uint64
	beforeFindCounter uint64
	FindMock          mAuthServiceMockFind

	funcGetList          func(ctx context.Context, limit *pagination.Limit) (ua1 []model.User, err error)
	inspectFuncGetList   func(ctx context.Context, limit *pagination.Limit)
	afterGetListCounter  uint64
	beforeGetListCounter uint64
	GetListMock          mAuthServiceMockGetList

	funcUpdate          func(ctx context.Context, id int64, info *model.UpdateUserInfo) (err error)
	inspectFuncUpdate   func(ctx context.Context, id int64, info *model.UpdateUserInfo)
	afterUpdateCounter  uint64
	beforeUpdateCounter uint64
	UpdateMock          mAuthServiceMockUpdate
}

// NewAuthServiceMock returns a mock for service.AuthService
func NewAuthServiceMock(t minimock.Tester) *AuthServiceMock {
	m := &AuthServiceMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mAuthServiceMockCreate{mock: m}
	m.CreateMock.callArgs = []*AuthServiceMockCreateParams{}

	m.DeleteMock = mAuthServiceMockDelete{mock: m}
	m.DeleteMock.callArgs = []*AuthServiceMockDeleteParams{}

	m.FindMock = mAuthServiceMockFind{mock: m}
	m.FindMock.callArgs = []*AuthServiceMockFindParams{}

	m.GetListMock = mAuthServiceMockGetList{mock: m}
	m.GetListMock.callArgs = []*AuthServiceMockGetListParams{}

	m.UpdateMock = mAuthServiceMockUpdate{mock: m}
	m.UpdateMock.callArgs = []*AuthServiceMockUpdateParams{}

	return m
}

type mAuthServiceMockCreate struct {
	mock               *AuthServiceMock
	defaultExpectation *AuthServiceMockCreateExpectation
	expectations       []*AuthServiceMockCreateExpectation

	callArgs []*AuthServiceMockCreateParams
	mutex    sync.RWMutex
}

// AuthServiceMockCreateExpectation specifies expectation struct of the AuthService.Create
type AuthServiceMockCreateExpectation struct {
	mock    *AuthServiceMock
	params  *AuthServiceMockCreateParams
	results *AuthServiceMockCreateResults
	Counter uint64
}

// AuthServiceMockCreateParams contains parameters of the AuthService.Create
type AuthServiceMockCreateParams struct {
	ctx  context.Context
	user *model.User
}

// AuthServiceMockCreateResults contains results of the AuthService.Create
type AuthServiceMockCreateResults struct {
	i1  int64
	err error
}

// Expect sets up expected params for AuthService.Create
func (mmCreate *mAuthServiceMockCreate) Expect(ctx context.Context, user *model.User) *mAuthServiceMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("AuthServiceMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &AuthServiceMockCreateExpectation{}
	}

	mmCreate.defaultExpectation.params = &AuthServiceMockCreateParams{ctx, user}
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the AuthService.Create
func (mmCreate *mAuthServiceMockCreate) Inspect(f func(ctx context.Context, user *model.User)) *mAuthServiceMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for AuthServiceMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by AuthService.Create
func (mmCreate *mAuthServiceMockCreate) Return(i1 int64, err error) *AuthServiceMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("AuthServiceMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &AuthServiceMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &AuthServiceMockCreateResults{i1, err}
	return mmCreate.mock
}

// Set uses given function f to mock the AuthService.Create method
func (mmCreate *mAuthServiceMockCreate) Set(f func(ctx context.Context, user *model.User) (i1 int64, err error)) *AuthServiceMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the AuthService.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the AuthService.Create method")
	}

	mmCreate.mock.funcCreate = f
	return mmCreate.mock
}

// When sets expectation for the AuthService.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mAuthServiceMockCreate) When(ctx context.Context, user *model.User) *AuthServiceMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("AuthServiceMock.Create mock is already set by Set")
	}

	expectation := &AuthServiceMockCreateExpectation{
		mock:   mmCreate.mock,
		params: &AuthServiceMockCreateParams{ctx, user},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up AuthService.Create return parameters for the expectation previously defined by the When method
func (e *AuthServiceMockCreateExpectation) Then(i1 int64, err error) *AuthServiceMock {
	e.results = &AuthServiceMockCreateResults{i1, err}
	return e.mock
}

// Create implements service.AuthService
func (mmCreate *AuthServiceMock) Create(ctx context.Context, user *model.User) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, user)
	}

	mm_params := &AuthServiceMockCreateParams{ctx, user}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_got := AuthServiceMockCreateParams{ctx, user}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("AuthServiceMock.Create got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the AuthServiceMock.Create")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, user)
	}
	mmCreate.t.Fatalf("Unexpected call to AuthServiceMock.Create. %v %v", ctx, user)
	return
}

// CreateAfterCounter returns a count of finished AuthServiceMock.Create invocations
func (mmCreate *AuthServiceMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of AuthServiceMock.Create invocations
func (mmCreate *AuthServiceMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to AuthServiceMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mAuthServiceMockCreate) Calls() []*AuthServiceMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*AuthServiceMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *AuthServiceMock) MinimockCreateDone() bool {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateInspect logs each unmet expectation
func (m *AuthServiceMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthServiceMock.Create with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to AuthServiceMock.Create")
		} else {
			m.t.Errorf("Expected call to AuthServiceMock.Create with params: %#v", *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		m.t.Error("Expected call to AuthServiceMock.Create")
	}
}

type mAuthServiceMockDelete struct {
	mock               *AuthServiceMock
	defaultExpectation *AuthServiceMockDeleteExpectation
	expectations       []*AuthServiceMockDeleteExpectation

	callArgs []*AuthServiceMockDeleteParams
	mutex    sync.RWMutex
}

// AuthServiceMockDeleteExpectation specifies expectation struct of the AuthService.Delete
type AuthServiceMockDeleteExpectation struct {
	mock    *AuthServiceMock
	params  *AuthServiceMockDeleteParams
	results *AuthServiceMockDeleteResults
	Counter uint64
}

// AuthServiceMockDeleteParams contains parameters of the AuthService.Delete
type AuthServiceMockDeleteParams struct {
	ctx context.Context
	id  int64
}

// AuthServiceMockDeleteResults contains results of the AuthService.Delete
type AuthServiceMockDeleteResults struct {
	err error
}

// Expect sets up expected params for AuthService.Delete
func (mmDelete *mAuthServiceMockDelete) Expect(ctx context.Context, id int64) *mAuthServiceMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("AuthServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &AuthServiceMockDeleteExpectation{}
	}

	mmDelete.defaultExpectation.params = &AuthServiceMockDeleteParams{ctx, id}
	for _, e := range mmDelete.expectations {
		if minimock.Equal(e.params, mmDelete.defaultExpectation.params) {
			mmDelete.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDelete.defaultExpectation.params)
		}
	}

	return mmDelete
}

// Inspect accepts an inspector function that has same arguments as the AuthService.Delete
func (mmDelete *mAuthServiceMockDelete) Inspect(f func(ctx context.Context, id int64)) *mAuthServiceMockDelete {
	if mmDelete.mock.inspectFuncDelete != nil {
		mmDelete.mock.t.Fatalf("Inspect function is already set for AuthServiceMock.Delete")
	}

	mmDelete.mock.inspectFuncDelete = f

	return mmDelete
}

// Return sets up results that will be returned by AuthService.Delete
func (mmDelete *mAuthServiceMockDelete) Return(err error) *AuthServiceMock {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("AuthServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &AuthServiceMockDeleteExpectation{mock: mmDelete.mock}
	}
	mmDelete.defaultExpectation.results = &AuthServiceMockDeleteResults{err}
	return mmDelete.mock
}

// Set uses given function f to mock the AuthService.Delete method
func (mmDelete *mAuthServiceMockDelete) Set(f func(ctx context.Context, id int64) (err error)) *AuthServiceMock {
	if mmDelete.defaultExpectation != nil {
		mmDelete.mock.t.Fatalf("Default expectation is already set for the AuthService.Delete method")
	}

	if len(mmDelete.expectations) > 0 {
		mmDelete.mock.t.Fatalf("Some expectations are already set for the AuthService.Delete method")
	}

	mmDelete.mock.funcDelete = f
	return mmDelete.mock
}

// When sets expectation for the AuthService.Delete which will trigger the result defined by the following
// Then helper
func (mmDelete *mAuthServiceMockDelete) When(ctx context.Context, id int64) *AuthServiceMockDeleteExpectation {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("AuthServiceMock.Delete mock is already set by Set")
	}

	expectation := &AuthServiceMockDeleteExpectation{
		mock:   mmDelete.mock,
		params: &AuthServiceMockDeleteParams{ctx, id},
	}
	mmDelete.expectations = append(mmDelete.expectations, expectation)
	return expectation
}

// Then sets up AuthService.Delete return parameters for the expectation previously defined by the When method
func (e *AuthServiceMockDeleteExpectation) Then(err error) *AuthServiceMock {
	e.results = &AuthServiceMockDeleteResults{err}
	return e.mock
}

// Delete implements service.AuthService
func (mmDelete *AuthServiceMock) Delete(ctx context.Context, id int64) (err error) {
	mm_atomic.AddUint64(&mmDelete.beforeDeleteCounter, 1)
	defer mm_atomic.AddUint64(&mmDelete.afterDeleteCounter, 1)

	if mmDelete.inspectFuncDelete != nil {
		mmDelete.inspectFuncDelete(ctx, id)
	}

	mm_params := &AuthServiceMockDeleteParams{ctx, id}

	// Record call args
	mmDelete.DeleteMock.mutex.Lock()
	mmDelete.DeleteMock.callArgs = append(mmDelete.DeleteMock.callArgs, mm_params)
	mmDelete.DeleteMock.mutex.Unlock()

	for _, e := range mmDelete.DeleteMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDelete.DeleteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDelete.DeleteMock.defaultExpectation.Counter, 1)
		mm_want := mmDelete.DeleteMock.defaultExpectation.params
		mm_got := AuthServiceMockDeleteParams{ctx, id}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDelete.t.Errorf("AuthServiceMock.Delete got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDelete.DeleteMock.defaultExpectation.results
		if mm_results == nil {
			mmDelete.t.Fatal("No results are set for the AuthServiceMock.Delete")
		}
		return (*mm_results).err
	}
	if mmDelete.funcDelete != nil {
		return mmDelete.funcDelete(ctx, id)
	}
	mmDelete.t.Fatalf("Unexpected call to AuthServiceMock.Delete. %v %v", ctx, id)
	return
}

// DeleteAfterCounter returns a count of finished AuthServiceMock.Delete invocations
func (mmDelete *AuthServiceMock) DeleteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.afterDeleteCounter)
}

// DeleteBeforeCounter returns a count of AuthServiceMock.Delete invocations
func (mmDelete *AuthServiceMock) DeleteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.beforeDeleteCounter)
}

// Calls returns a list of arguments used in each call to AuthServiceMock.Delete.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDelete *mAuthServiceMockDelete) Calls() []*AuthServiceMockDeleteParams {
	mmDelete.mutex.RLock()

	argCopy := make([]*AuthServiceMockDeleteParams, len(mmDelete.callArgs))
	copy(argCopy, mmDelete.callArgs)

	mmDelete.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteDone returns true if the count of the Delete invocations corresponds
// the number of defined expectations
func (m *AuthServiceMock) MinimockDeleteDone() bool {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		return false
	}
	return true
}

// MinimockDeleteInspect logs each unmet expectation
func (m *AuthServiceMock) MinimockDeleteInspect() {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthServiceMock.Delete with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		if m.DeleteMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to AuthServiceMock.Delete")
		} else {
			m.t.Errorf("Expected call to AuthServiceMock.Delete with params: %#v", *m.DeleteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		m.t.Error("Expected call to AuthServiceMock.Delete")
	}
}

type mAuthServiceMockFind struct {
	mock               *AuthServiceMock
	defaultExpectation *AuthServiceMockFindExpectation
	expectations       []*AuthServiceMockFindExpectation

	callArgs []*AuthServiceMockFindParams
	mutex    sync.RWMutex
}

// AuthServiceMockFindExpectation specifies expectation struct of the AuthService.Find
type AuthServiceMockFindExpectation struct {
	mock    *AuthServiceMock
	params  *AuthServiceMockFindParams
	results *AuthServiceMockFindResults
	Counter uint64
}

// AuthServiceMockFindParams contains parameters of the AuthService.Find
type AuthServiceMockFindParams struct {
	ctx context.Context
	id  int64
}

// AuthServiceMockFindResults contains results of the AuthService.Find
type AuthServiceMockFindResults struct {
	up1 *model.User
	err error
}

// Expect sets up expected params for AuthService.Find
func (mmFind *mAuthServiceMockFind) Expect(ctx context.Context, id int64) *mAuthServiceMockFind {
	if mmFind.mock.funcFind != nil {
		mmFind.mock.t.Fatalf("AuthServiceMock.Find mock is already set by Set")
	}

	if mmFind.defaultExpectation == nil {
		mmFind.defaultExpectation = &AuthServiceMockFindExpectation{}
	}

	mmFind.defaultExpectation.params = &AuthServiceMockFindParams{ctx, id}
	for _, e := range mmFind.expectations {
		if minimock.Equal(e.params, mmFind.defaultExpectation.params) {
			mmFind.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmFind.defaultExpectation.params)
		}
	}

	return mmFind
}

// Inspect accepts an inspector function that has same arguments as the AuthService.Find
func (mmFind *mAuthServiceMockFind) Inspect(f func(ctx context.Context, id int64)) *mAuthServiceMockFind {
	if mmFind.mock.inspectFuncFind != nil {
		mmFind.mock.t.Fatalf("Inspect function is already set for AuthServiceMock.Find")
	}

	mmFind.mock.inspectFuncFind = f

	return mmFind
}

// Return sets up results that will be returned by AuthService.Find
func (mmFind *mAuthServiceMockFind) Return(up1 *model.User, err error) *AuthServiceMock {
	if mmFind.mock.funcFind != nil {
		mmFind.mock.t.Fatalf("AuthServiceMock.Find mock is already set by Set")
	}

	if mmFind.defaultExpectation == nil {
		mmFind.defaultExpectation = &AuthServiceMockFindExpectation{mock: mmFind.mock}
	}
	mmFind.defaultExpectation.results = &AuthServiceMockFindResults{up1, err}
	return mmFind.mock
}

// Set uses given function f to mock the AuthService.Find method
func (mmFind *mAuthServiceMockFind) Set(f func(ctx context.Context, id int64) (up1 *model.User, err error)) *AuthServiceMock {
	if mmFind.defaultExpectation != nil {
		mmFind.mock.t.Fatalf("Default expectation is already set for the AuthService.Find method")
	}

	if len(mmFind.expectations) > 0 {
		mmFind.mock.t.Fatalf("Some expectations are already set for the AuthService.Find method")
	}

	mmFind.mock.funcFind = f
	return mmFind.mock
}

// When sets expectation for the AuthService.Find which will trigger the result defined by the following
// Then helper
func (mmFind *mAuthServiceMockFind) When(ctx context.Context, id int64) *AuthServiceMockFindExpectation {
	if mmFind.mock.funcFind != nil {
		mmFind.mock.t.Fatalf("AuthServiceMock.Find mock is already set by Set")
	}

	expectation := &AuthServiceMockFindExpectation{
		mock:   mmFind.mock,
		params: &AuthServiceMockFindParams{ctx, id},
	}
	mmFind.expectations = append(mmFind.expectations, expectation)
	return expectation
}

// Then sets up AuthService.Find return parameters for the expectation previously defined by the When method
func (e *AuthServiceMockFindExpectation) Then(up1 *model.User, err error) *AuthServiceMock {
	e.results = &AuthServiceMockFindResults{up1, err}
	return e.mock
}

// Find implements service.AuthService
func (mmFind *AuthServiceMock) Find(ctx context.Context, id int64) (up1 *model.User, err error) {
	mm_atomic.AddUint64(&mmFind.beforeFindCounter, 1)
	defer mm_atomic.AddUint64(&mmFind.afterFindCounter, 1)

	if mmFind.inspectFuncFind != nil {
		mmFind.inspectFuncFind(ctx, id)
	}

	mm_params := &AuthServiceMockFindParams{ctx, id}

	// Record call args
	mmFind.FindMock.mutex.Lock()
	mmFind.FindMock.callArgs = append(mmFind.FindMock.callArgs, mm_params)
	mmFind.FindMock.mutex.Unlock()

	for _, e := range mmFind.FindMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmFind.FindMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmFind.FindMock.defaultExpectation.Counter, 1)
		mm_want := mmFind.FindMock.defaultExpectation.params
		mm_got := AuthServiceMockFindParams{ctx, id}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmFind.t.Errorf("AuthServiceMock.Find got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmFind.FindMock.defaultExpectation.results
		if mm_results == nil {
			mmFind.t.Fatal("No results are set for the AuthServiceMock.Find")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmFind.funcFind != nil {
		return mmFind.funcFind(ctx, id)
	}
	mmFind.t.Fatalf("Unexpected call to AuthServiceMock.Find. %v %v", ctx, id)
	return
}

// FindAfterCounter returns a count of finished AuthServiceMock.Find invocations
func (mmFind *AuthServiceMock) FindAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFind.afterFindCounter)
}

// FindBeforeCounter returns a count of AuthServiceMock.Find invocations
func (mmFind *AuthServiceMock) FindBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFind.beforeFindCounter)
}

// Calls returns a list of arguments used in each call to AuthServiceMock.Find.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmFind *mAuthServiceMockFind) Calls() []*AuthServiceMockFindParams {
	mmFind.mutex.RLock()

	argCopy := make([]*AuthServiceMockFindParams, len(mmFind.callArgs))
	copy(argCopy, mmFind.callArgs)

	mmFind.mutex.RUnlock()

	return argCopy
}

// MinimockFindDone returns true if the count of the Find invocations corresponds
// the number of defined expectations
func (m *AuthServiceMock) MinimockFindDone() bool {
	for _, e := range m.FindMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FindMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFindCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFind != nil && mm_atomic.LoadUint64(&m.afterFindCounter) < 1 {
		return false
	}
	return true
}

// MinimockFindInspect logs each unmet expectation
func (m *AuthServiceMock) MinimockFindInspect() {
	for _, e := range m.FindMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthServiceMock.Find with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.FindMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterFindCounter) < 1 {
		if m.FindMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to AuthServiceMock.Find")
		} else {
			m.t.Errorf("Expected call to AuthServiceMock.Find with params: %#v", *m.FindMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFind != nil && mm_atomic.LoadUint64(&m.afterFindCounter) < 1 {
		m.t.Error("Expected call to AuthServiceMock.Find")
	}
}

type mAuthServiceMockGetList struct {
	mock               *AuthServiceMock
	defaultExpectation *AuthServiceMockGetListExpectation
	expectations       []*AuthServiceMockGetListExpectation

	callArgs []*AuthServiceMockGetListParams
	mutex    sync.RWMutex
}

// AuthServiceMockGetListExpectation specifies expectation struct of the AuthService.GetList
type AuthServiceMockGetListExpectation struct {
	mock    *AuthServiceMock
	params  *AuthServiceMockGetListParams
	results *AuthServiceMockGetListResults
	Counter uint64
}

// AuthServiceMockGetListParams contains parameters of the AuthService.GetList
type AuthServiceMockGetListParams struct {
	ctx   context.Context
	limit *pagination.Limit
}

// AuthServiceMockGetListResults contains results of the AuthService.GetList
type AuthServiceMockGetListResults struct {
	ua1 []model.User
	err error
}

// Expect sets up expected params for AuthService.GetList
func (mmGetList *mAuthServiceMockGetList) Expect(ctx context.Context, limit *pagination.Limit) *mAuthServiceMockGetList {
	if mmGetList.mock.funcGetList != nil {
		mmGetList.mock.t.Fatalf("AuthServiceMock.GetList mock is already set by Set")
	}

	if mmGetList.defaultExpectation == nil {
		mmGetList.defaultExpectation = &AuthServiceMockGetListExpectation{}
	}

	mmGetList.defaultExpectation.params = &AuthServiceMockGetListParams{ctx, limit}
	for _, e := range mmGetList.expectations {
		if minimock.Equal(e.params, mmGetList.defaultExpectation.params) {
			mmGetList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetList.defaultExpectation.params)
		}
	}

	return mmGetList
}

// Inspect accepts an inspector function that has same arguments as the AuthService.GetList
func (mmGetList *mAuthServiceMockGetList) Inspect(f func(ctx context.Context, limit *pagination.Limit)) *mAuthServiceMockGetList {
	if mmGetList.mock.inspectFuncGetList != nil {
		mmGetList.mock.t.Fatalf("Inspect function is already set for AuthServiceMock.GetList")
	}

	mmGetList.mock.inspectFuncGetList = f

	return mmGetList
}

// Return sets up results that will be returned by AuthService.GetList
func (mmGetList *mAuthServiceMockGetList) Return(ua1 []model.User, err error) *AuthServiceMock {
	if mmGetList.mock.funcGetList != nil {
		mmGetList.mock.t.Fatalf("AuthServiceMock.GetList mock is already set by Set")
	}

	if mmGetList.defaultExpectation == nil {
		mmGetList.defaultExpectation = &AuthServiceMockGetListExpectation{mock: mmGetList.mock}
	}
	mmGetList.defaultExpectation.results = &AuthServiceMockGetListResults{ua1, err}
	return mmGetList.mock
}

// Set uses given function f to mock the AuthService.GetList method
func (mmGetList *mAuthServiceMockGetList) Set(f func(ctx context.Context, limit *pagination.Limit) (ua1 []model.User, err error)) *AuthServiceMock {
	if mmGetList.defaultExpectation != nil {
		mmGetList.mock.t.Fatalf("Default expectation is already set for the AuthService.GetList method")
	}

	if len(mmGetList.expectations) > 0 {
		mmGetList.mock.t.Fatalf("Some expectations are already set for the AuthService.GetList method")
	}

	mmGetList.mock.funcGetList = f
	return mmGetList.mock
}

// When sets expectation for the AuthService.GetList which will trigger the result defined by the following
// Then helper
func (mmGetList *mAuthServiceMockGetList) When(ctx context.Context, limit *pagination.Limit) *AuthServiceMockGetListExpectation {
	if mmGetList.mock.funcGetList != nil {
		mmGetList.mock.t.Fatalf("AuthServiceMock.GetList mock is already set by Set")
	}

	expectation := &AuthServiceMockGetListExpectation{
		mock:   mmGetList.mock,
		params: &AuthServiceMockGetListParams{ctx, limit},
	}
	mmGetList.expectations = append(mmGetList.expectations, expectation)
	return expectation
}

// Then sets up AuthService.GetList return parameters for the expectation previously defined by the When method
func (e *AuthServiceMockGetListExpectation) Then(ua1 []model.User, err error) *AuthServiceMock {
	e.results = &AuthServiceMockGetListResults{ua1, err}
	return e.mock
}

// GetList implements service.AuthService
func (mmGetList *AuthServiceMock) GetList(ctx context.Context, limit *pagination.Limit) (ua1 []model.User, err error) {
	mm_atomic.AddUint64(&mmGetList.beforeGetListCounter, 1)
	defer mm_atomic.AddUint64(&mmGetList.afterGetListCounter, 1)

	if mmGetList.inspectFuncGetList != nil {
		mmGetList.inspectFuncGetList(ctx, limit)
	}

	mm_params := &AuthServiceMockGetListParams{ctx, limit}

	// Record call args
	mmGetList.GetListMock.mutex.Lock()
	mmGetList.GetListMock.callArgs = append(mmGetList.GetListMock.callArgs, mm_params)
	mmGetList.GetListMock.mutex.Unlock()

	for _, e := range mmGetList.GetListMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ua1, e.results.err
		}
	}

	if mmGetList.GetListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetList.GetListMock.defaultExpectation.Counter, 1)
		mm_want := mmGetList.GetListMock.defaultExpectation.params
		mm_got := AuthServiceMockGetListParams{ctx, limit}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetList.t.Errorf("AuthServiceMock.GetList got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetList.GetListMock.defaultExpectation.results
		if mm_results == nil {
			mmGetList.t.Fatal("No results are set for the AuthServiceMock.GetList")
		}
		return (*mm_results).ua1, (*mm_results).err
	}
	if mmGetList.funcGetList != nil {
		return mmGetList.funcGetList(ctx, limit)
	}
	mmGetList.t.Fatalf("Unexpected call to AuthServiceMock.GetList. %v %v", ctx, limit)
	return
}

// GetListAfterCounter returns a count of finished AuthServiceMock.GetList invocations
func (mmGetList *AuthServiceMock) GetListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetList.afterGetListCounter)
}

// GetListBeforeCounter returns a count of AuthServiceMock.GetList invocations
func (mmGetList *AuthServiceMock) GetListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetList.beforeGetListCounter)
}

// Calls returns a list of arguments used in each call to AuthServiceMock.GetList.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetList *mAuthServiceMockGetList) Calls() []*AuthServiceMockGetListParams {
	mmGetList.mutex.RLock()

	argCopy := make([]*AuthServiceMockGetListParams, len(mmGetList.callArgs))
	copy(argCopy, mmGetList.callArgs)

	mmGetList.mutex.RUnlock()

	return argCopy
}

// MinimockGetListDone returns true if the count of the GetList invocations corresponds
// the number of defined expectations
func (m *AuthServiceMock) MinimockGetListDone() bool {
	for _, e := range m.GetListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetListCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetList != nil && mm_atomic.LoadUint64(&m.afterGetListCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetListInspect logs each unmet expectation
func (m *AuthServiceMock) MinimockGetListInspect() {
	for _, e := range m.GetListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthServiceMock.GetList with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetListCounter) < 1 {
		if m.GetListMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to AuthServiceMock.GetList")
		} else {
			m.t.Errorf("Expected call to AuthServiceMock.GetList with params: %#v", *m.GetListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetList != nil && mm_atomic.LoadUint64(&m.afterGetListCounter) < 1 {
		m.t.Error("Expected call to AuthServiceMock.GetList")
	}
}

type mAuthServiceMockUpdate struct {
	mock               *AuthServiceMock
	defaultExpectation *AuthServiceMockUpdateExpectation
	expectations       []*AuthServiceMockUpdateExpectation

	callArgs []*AuthServiceMockUpdateParams
	mutex    sync.RWMutex
}

// AuthServiceMockUpdateExpectation specifies expectation struct of the AuthService.Update
type AuthServiceMockUpdateExpectation struct {
	mock    *AuthServiceMock
	params  *AuthServiceMockUpdateParams
	results *AuthServiceMockUpdateResults
	Counter uint64
}

// AuthServiceMockUpdateParams contains parameters of the AuthService.Update
type AuthServiceMockUpdateParams struct {
	ctx  context.Context
	id   int64
	info *model.UpdateUserInfo
}

// AuthServiceMockUpdateResults contains results of the AuthService.Update
type AuthServiceMockUpdateResults struct {
	err error
}

// Expect sets up expected params for AuthService.Update
func (mmUpdate *mAuthServiceMockUpdate) Expect(ctx context.Context, id int64, info *model.UpdateUserInfo) *mAuthServiceMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("AuthServiceMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &AuthServiceMockUpdateExpectation{}
	}

	mmUpdate.defaultExpectation.params = &AuthServiceMockUpdateParams{ctx, id, info}
	for _, e := range mmUpdate.expectations {
		if minimock.Equal(e.params, mmUpdate.defaultExpectation.params) {
			mmUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdate.defaultExpectation.params)
		}
	}

	return mmUpdate
}

// Inspect accepts an inspector function that has same arguments as the AuthService.Update
func (mmUpdate *mAuthServiceMockUpdate) Inspect(f func(ctx context.Context, id int64, info *model.UpdateUserInfo)) *mAuthServiceMockUpdate {
	if mmUpdate.mock.inspectFuncUpdate != nil {
		mmUpdate.mock.t.Fatalf("Inspect function is already set for AuthServiceMock.Update")
	}

	mmUpdate.mock.inspectFuncUpdate = f

	return mmUpdate
}

// Return sets up results that will be returned by AuthService.Update
func (mmUpdate *mAuthServiceMockUpdate) Return(err error) *AuthServiceMock {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("AuthServiceMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &AuthServiceMockUpdateExpectation{mock: mmUpdate.mock}
	}
	mmUpdate.defaultExpectation.results = &AuthServiceMockUpdateResults{err}
	return mmUpdate.mock
}

// Set uses given function f to mock the AuthService.Update method
func (mmUpdate *mAuthServiceMockUpdate) Set(f func(ctx context.Context, id int64, info *model.UpdateUserInfo) (err error)) *AuthServiceMock {
	if mmUpdate.defaultExpectation != nil {
		mmUpdate.mock.t.Fatalf("Default expectation is already set for the AuthService.Update method")
	}

	if len(mmUpdate.expectations) > 0 {
		mmUpdate.mock.t.Fatalf("Some expectations are already set for the AuthService.Update method")
	}

	mmUpdate.mock.funcUpdate = f
	return mmUpdate.mock
}

// When sets expectation for the AuthService.Update which will trigger the result defined by the following
// Then helper
func (mmUpdate *mAuthServiceMockUpdate) When(ctx context.Context, id int64, info *model.UpdateUserInfo) *AuthServiceMockUpdateExpectation {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("AuthServiceMock.Update mock is already set by Set")
	}

	expectation := &AuthServiceMockUpdateExpectation{
		mock:   mmUpdate.mock,
		params: &AuthServiceMockUpdateParams{ctx, id, info},
	}
	mmUpdate.expectations = append(mmUpdate.expectations, expectation)
	return expectation
}

// Then sets up AuthService.Update return parameters for the expectation previously defined by the When method
func (e *AuthServiceMockUpdateExpectation) Then(err error) *AuthServiceMock {
	e.results = &AuthServiceMockUpdateResults{err}
	return e.mock
}

// Update implements service.AuthService
func (mmUpdate *AuthServiceMock) Update(ctx context.Context, id int64, info *model.UpdateUserInfo) (err error) {
	mm_atomic.AddUint64(&mmUpdate.beforeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdate.afterUpdateCounter, 1)

	if mmUpdate.inspectFuncUpdate != nil {
		mmUpdate.inspectFuncUpdate(ctx, id, info)
	}

	mm_params := &AuthServiceMockUpdateParams{ctx, id, info}

	// Record call args
	mmUpdate.UpdateMock.mutex.Lock()
	mmUpdate.UpdateMock.callArgs = append(mmUpdate.UpdateMock.callArgs, mm_params)
	mmUpdate.UpdateMock.mutex.Unlock()

	for _, e := range mmUpdate.UpdateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdate.UpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdate.UpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdate.UpdateMock.defaultExpectation.params
		mm_got := AuthServiceMockUpdateParams{ctx, id, info}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdate.t.Errorf("AuthServiceMock.Update got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdate.UpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdate.t.Fatal("No results are set for the AuthServiceMock.Update")
		}
		return (*mm_results).err
	}
	if mmUpdate.funcUpdate != nil {
		return mmUpdate.funcUpdate(ctx, id, info)
	}
	mmUpdate.t.Fatalf("Unexpected call to AuthServiceMock.Update. %v %v %v", ctx, id, info)
	return
}

// UpdateAfterCounter returns a count of finished AuthServiceMock.Update invocations
func (mmUpdate *AuthServiceMock) UpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.afterUpdateCounter)
}

// UpdateBeforeCounter returns a count of AuthServiceMock.Update invocations
func (mmUpdate *AuthServiceMock) UpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.beforeUpdateCounter)
}

// Calls returns a list of arguments used in each call to AuthServiceMock.Update.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdate *mAuthServiceMockUpdate) Calls() []*AuthServiceMockUpdateParams {
	mmUpdate.mutex.RLock()

	argCopy := make([]*AuthServiceMockUpdateParams, len(mmUpdate.callArgs))
	copy(argCopy, mmUpdate.callArgs)

	mmUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateDone returns true if the count of the Update invocations corresponds
// the number of defined expectations
func (m *AuthServiceMock) MinimockUpdateDone() bool {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateInspect logs each unmet expectation
func (m *AuthServiceMock) MinimockUpdateInspect() {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthServiceMock.Update with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		if m.UpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to AuthServiceMock.Update")
		} else {
			m.t.Errorf("Expected call to AuthServiceMock.Update with params: %#v", *m.UpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		m.t.Error("Expected call to AuthServiceMock.Update")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AuthServiceMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCreateInspect()

		m.MinimockDeleteInspect()

		m.MinimockFindInspect()

		m.MinimockGetListInspect()

		m.MinimockUpdateInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AuthServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AuthServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone() &&
		m.MinimockDeleteDone() &&
		m.MinimockFindDone() &&
		m.MinimockGetListDone() &&
		m.MinimockUpdateDone()
}
