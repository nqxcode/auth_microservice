package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/nqxcode/auth_microservice/internal/service.ValidatorService -o ./mocks\validator_service_minimock.go -n ValidatorServiceMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/nqxcode/auth_microservice/internal/model"
)

// ValidatorServiceMock implements service.ValidatorService
type ValidatorServiceMock struct {
	t minimock.Tester

	funcValidateUser          func(ctx context.Context, userInfo model.UserInfo, password string, passwordConfirm string) (err error)
	inspectFuncValidateUser   func(ctx context.Context, userInfo model.UserInfo, password string, passwordConfirm string)
	afterValidateUserCounter  uint64
	beforeValidateUserCounter uint64
	ValidateUserMock          mValidatorServiceMockValidateUser
}

// NewValidatorServiceMock returns a mock for service.ValidatorService
func NewValidatorServiceMock(t minimock.Tester) *ValidatorServiceMock {
	m := &ValidatorServiceMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ValidateUserMock = mValidatorServiceMockValidateUser{mock: m}
	m.ValidateUserMock.callArgs = []*ValidatorServiceMockValidateUserParams{}

	return m
}

type mValidatorServiceMockValidateUser struct {
	mock               *ValidatorServiceMock
	defaultExpectation *ValidatorServiceMockValidateUserExpectation
	expectations       []*ValidatorServiceMockValidateUserExpectation

	callArgs []*ValidatorServiceMockValidateUserParams
	mutex    sync.RWMutex
}

// ValidatorServiceMockValidateUserExpectation specifies expectation struct of the ValidatorService.ValidateUser
type ValidatorServiceMockValidateUserExpectation struct {
	mock    *ValidatorServiceMock
	params  *ValidatorServiceMockValidateUserParams
	results *ValidatorServiceMockValidateUserResults
	Counter uint64
}

// ValidatorServiceMockValidateUserParams contains parameters of the ValidatorService.ValidateUser
type ValidatorServiceMockValidateUserParams struct {
	ctx             context.Context
	userInfo        model.UserInfo
	password        string
	passwordConfirm string
}

// ValidatorServiceMockValidateUserResults contains results of the ValidatorService.ValidateUser
type ValidatorServiceMockValidateUserResults struct {
	err error
}

// Expect sets up expected params for ValidatorService.ValidateUser
func (mmValidateUser *mValidatorServiceMockValidateUser) Expect(ctx context.Context, userInfo model.UserInfo, password string, passwordConfirm string) *mValidatorServiceMockValidateUser {
	if mmValidateUser.mock.funcValidateUser != nil {
		mmValidateUser.mock.t.Fatalf("ValidatorServiceMock.ValidateUser mock is already set by Set")
	}

	if mmValidateUser.defaultExpectation == nil {
		mmValidateUser.defaultExpectation = &ValidatorServiceMockValidateUserExpectation{}
	}

	mmValidateUser.defaultExpectation.params = &ValidatorServiceMockValidateUserParams{ctx, userInfo, password, passwordConfirm}
	for _, e := range mmValidateUser.expectations {
		if minimock.Equal(e.params, mmValidateUser.defaultExpectation.params) {
			mmValidateUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmValidateUser.defaultExpectation.params)
		}
	}

	return mmValidateUser
}

// Inspect accepts an inspector function that has same arguments as the ValidatorService.ValidateUser
func (mmValidateUser *mValidatorServiceMockValidateUser) Inspect(f func(ctx context.Context, userInfo model.UserInfo, password string, passwordConfirm string)) *mValidatorServiceMockValidateUser {
	if mmValidateUser.mock.inspectFuncValidateUser != nil {
		mmValidateUser.mock.t.Fatalf("Inspect function is already set for ValidatorServiceMock.ValidateUser")
	}

	mmValidateUser.mock.inspectFuncValidateUser = f

	return mmValidateUser
}

// Return sets up results that will be returned by ValidatorService.ValidateUser
func (mmValidateUser *mValidatorServiceMockValidateUser) Return(err error) *ValidatorServiceMock {
	if mmValidateUser.mock.funcValidateUser != nil {
		mmValidateUser.mock.t.Fatalf("ValidatorServiceMock.ValidateUser mock is already set by Set")
	}

	if mmValidateUser.defaultExpectation == nil {
		mmValidateUser.defaultExpectation = &ValidatorServiceMockValidateUserExpectation{mock: mmValidateUser.mock}
	}
	mmValidateUser.defaultExpectation.results = &ValidatorServiceMockValidateUserResults{err}
	return mmValidateUser.mock
}

// Set uses given function f to mock the ValidatorService.ValidateUser method
func (mmValidateUser *mValidatorServiceMockValidateUser) Set(f func(ctx context.Context, userInfo model.UserInfo, password string, passwordConfirm string) (err error)) *ValidatorServiceMock {
	if mmValidateUser.defaultExpectation != nil {
		mmValidateUser.mock.t.Fatalf("Default expectation is already set for the ValidatorService.ValidateUser method")
	}

	if len(mmValidateUser.expectations) > 0 {
		mmValidateUser.mock.t.Fatalf("Some expectations are already set for the ValidatorService.ValidateUser method")
	}

	mmValidateUser.mock.funcValidateUser = f
	return mmValidateUser.mock
}

// When sets expectation for the ValidatorService.ValidateUser which will trigger the result defined by the following
// Then helper
func (mmValidateUser *mValidatorServiceMockValidateUser) When(ctx context.Context, userInfo model.UserInfo, password string, passwordConfirm string) *ValidatorServiceMockValidateUserExpectation {
	if mmValidateUser.mock.funcValidateUser != nil {
		mmValidateUser.mock.t.Fatalf("ValidatorServiceMock.ValidateUser mock is already set by Set")
	}

	expectation := &ValidatorServiceMockValidateUserExpectation{
		mock:   mmValidateUser.mock,
		params: &ValidatorServiceMockValidateUserParams{ctx, userInfo, password, passwordConfirm},
	}
	mmValidateUser.expectations = append(mmValidateUser.expectations, expectation)
	return expectation
}

// Then sets up ValidatorService.ValidateUser return parameters for the expectation previously defined by the When method
func (e *ValidatorServiceMockValidateUserExpectation) Then(err error) *ValidatorServiceMock {
	e.results = &ValidatorServiceMockValidateUserResults{err}
	return e.mock
}

// ValidateUser implements service.ValidatorService
func (mmValidateUser *ValidatorServiceMock) ValidateUser(ctx context.Context, userInfo model.UserInfo, password string, passwordConfirm string) (err error) {
	mm_atomic.AddUint64(&mmValidateUser.beforeValidateUserCounter, 1)
	defer mm_atomic.AddUint64(&mmValidateUser.afterValidateUserCounter, 1)

	if mmValidateUser.inspectFuncValidateUser != nil {
		mmValidateUser.inspectFuncValidateUser(ctx, userInfo, password, passwordConfirm)
	}

	mm_params := &ValidatorServiceMockValidateUserParams{ctx, userInfo, password, passwordConfirm}

	// Record call args
	mmValidateUser.ValidateUserMock.mutex.Lock()
	mmValidateUser.ValidateUserMock.callArgs = append(mmValidateUser.ValidateUserMock.callArgs, mm_params)
	mmValidateUser.ValidateUserMock.mutex.Unlock()

	for _, e := range mmValidateUser.ValidateUserMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmValidateUser.ValidateUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmValidateUser.ValidateUserMock.defaultExpectation.Counter, 1)
		mm_want := mmValidateUser.ValidateUserMock.defaultExpectation.params
		mm_got := ValidatorServiceMockValidateUserParams{ctx, userInfo, password, passwordConfirm}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmValidateUser.t.Errorf("ValidatorServiceMock.ValidateUser got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmValidateUser.ValidateUserMock.defaultExpectation.results
		if mm_results == nil {
			mmValidateUser.t.Fatal("No results are set for the ValidatorServiceMock.ValidateUser")
		}
		return (*mm_results).err
	}
	if mmValidateUser.funcValidateUser != nil {
		return mmValidateUser.funcValidateUser(ctx, userInfo, password, passwordConfirm)
	}
	mmValidateUser.t.Fatalf("Unexpected call to ValidatorServiceMock.ValidateUser. %v %v %v %v", ctx, userInfo, password, passwordConfirm)
	return
}

// ValidateUserAfterCounter returns a count of finished ValidatorServiceMock.ValidateUser invocations
func (mmValidateUser *ValidatorServiceMock) ValidateUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmValidateUser.afterValidateUserCounter)
}

// ValidateUserBeforeCounter returns a count of ValidatorServiceMock.ValidateUser invocations
func (mmValidateUser *ValidatorServiceMock) ValidateUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmValidateUser.beforeValidateUserCounter)
}

// Calls returns a list of arguments used in each call to ValidatorServiceMock.ValidateUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmValidateUser *mValidatorServiceMockValidateUser) Calls() []*ValidatorServiceMockValidateUserParams {
	mmValidateUser.mutex.RLock()

	argCopy := make([]*ValidatorServiceMockValidateUserParams, len(mmValidateUser.callArgs))
	copy(argCopy, mmValidateUser.callArgs)

	mmValidateUser.mutex.RUnlock()

	return argCopy
}

// MinimockValidateUserDone returns true if the count of the ValidateUser invocations corresponds
// the number of defined expectations
func (m *ValidatorServiceMock) MinimockValidateUserDone() bool {
	for _, e := range m.ValidateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ValidateUserMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterValidateUserCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcValidateUser != nil && mm_atomic.LoadUint64(&m.afterValidateUserCounter) < 1 {
		return false
	}
	return true
}

// MinimockValidateUserInspect logs each unmet expectation
func (m *ValidatorServiceMock) MinimockValidateUserInspect() {
	for _, e := range m.ValidateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ValidatorServiceMock.ValidateUser with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ValidateUserMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterValidateUserCounter) < 1 {
		if m.ValidateUserMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ValidatorServiceMock.ValidateUser")
		} else {
			m.t.Errorf("Expected call to ValidatorServiceMock.ValidateUser with params: %#v", *m.ValidateUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcValidateUser != nil && mm_atomic.LoadUint64(&m.afterValidateUserCounter) < 1 {
		m.t.Error("Expected call to ValidatorServiceMock.ValidateUser")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ValidatorServiceMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockValidateUserInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ValidatorServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ValidatorServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockValidateUserDone()
}
