// Code generated by http://github.com/gojuno/minimock (v3.3.14). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/nqxcode/auth_microservice/internal/service.CacheUserService -o cache_user_service_minimock.go -n CacheUserServiceMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/nqxcode/auth_microservice/internal/model"
	"github.com/nqxcode/platform_common/pagination"
)

// CacheUserServiceMock implements service.CacheUserService
type CacheUserServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcDelete          func(ctx context.Context, userID int64) (err error)
	inspectFuncDelete   func(ctx context.Context, userID int64)
	afterDeleteCounter  uint64
	beforeDeleteCounter uint64
	DeleteMock          mCacheUserServiceMockDelete

	funcGet          func(ctx context.Context, userID int64) (up1 *model.User, err error)
	inspectFuncGet   func(ctx context.Context, userID int64)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mCacheUserServiceMockGet

	funcGetList          func(ctx context.Context, limit pagination.Limit) (ua1 []model.User, err error)
	inspectFuncGetList   func(ctx context.Context, limit pagination.Limit)
	afterGetListCounter  uint64
	beforeGetListCounter uint64
	GetListMock          mCacheUserServiceMockGetList

	funcSet          func(ctx context.Context, user *model.User) (err error)
	inspectFuncSet   func(ctx context.Context, user *model.User)
	afterSetCounter  uint64
	beforeSetCounter uint64
	SetMock          mCacheUserServiceMockSet

	funcSetList          func(ctx context.Context, users []model.User, limit pagination.Limit) (err error)
	inspectFuncSetList   func(ctx context.Context, users []model.User, limit pagination.Limit)
	afterSetListCounter  uint64
	beforeSetListCounter uint64
	SetListMock          mCacheUserServiceMockSetList

	funcSetPartial          func(ctx context.Context, id int64, user *model.UpdateUserInfo) (err error)
	inspectFuncSetPartial   func(ctx context.Context, id int64, user *model.UpdateUserInfo)
	afterSetPartialCounter  uint64
	beforeSetPartialCounter uint64
	SetPartialMock          mCacheUserServiceMockSetPartial
}

// NewCacheUserServiceMock returns a mock for service.CacheUserService
func NewCacheUserServiceMock(t minimock.Tester) *CacheUserServiceMock {
	m := &CacheUserServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.DeleteMock = mCacheUserServiceMockDelete{mock: m}
	m.DeleteMock.callArgs = []*CacheUserServiceMockDeleteParams{}

	m.GetMock = mCacheUserServiceMockGet{mock: m}
	m.GetMock.callArgs = []*CacheUserServiceMockGetParams{}

	m.GetListMock = mCacheUserServiceMockGetList{mock: m}
	m.GetListMock.callArgs = []*CacheUserServiceMockGetListParams{}

	m.SetMock = mCacheUserServiceMockSet{mock: m}
	m.SetMock.callArgs = []*CacheUserServiceMockSetParams{}

	m.SetListMock = mCacheUserServiceMockSetList{mock: m}
	m.SetListMock.callArgs = []*CacheUserServiceMockSetListParams{}

	m.SetPartialMock = mCacheUserServiceMockSetPartial{mock: m}
	m.SetPartialMock.callArgs = []*CacheUserServiceMockSetPartialParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mCacheUserServiceMockDelete struct {
	optional           bool
	mock               *CacheUserServiceMock
	defaultExpectation *CacheUserServiceMockDeleteExpectation
	expectations       []*CacheUserServiceMockDeleteExpectation

	callArgs []*CacheUserServiceMockDeleteParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// CacheUserServiceMockDeleteExpectation specifies expectation struct of the CacheUserService.Delete
type CacheUserServiceMockDeleteExpectation struct {
	mock      *CacheUserServiceMock
	params    *CacheUserServiceMockDeleteParams
	paramPtrs *CacheUserServiceMockDeleteParamPtrs
	results   *CacheUserServiceMockDeleteResults
	Counter   uint64
}

// CacheUserServiceMockDeleteParams contains parameters of the CacheUserService.Delete
type CacheUserServiceMockDeleteParams struct {
	ctx    context.Context
	userID int64
}

// CacheUserServiceMockDeleteParamPtrs contains pointers to parameters of the CacheUserService.Delete
type CacheUserServiceMockDeleteParamPtrs struct {
	ctx    *context.Context
	userID *int64
}

// CacheUserServiceMockDeleteResults contains results of the CacheUserService.Delete
type CacheUserServiceMockDeleteResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDelete *mCacheUserServiceMockDelete) Optional() *mCacheUserServiceMockDelete {
	mmDelete.optional = true
	return mmDelete
}

// Expect sets up expected params for CacheUserService.Delete
func (mmDelete *mCacheUserServiceMockDelete) Expect(ctx context.Context, userID int64) *mCacheUserServiceMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("CacheUserServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &CacheUserServiceMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.paramPtrs != nil {
		mmDelete.mock.t.Fatalf("CacheUserServiceMock.Delete mock is already set by ExpectParams functions")
	}

	mmDelete.defaultExpectation.params = &CacheUserServiceMockDeleteParams{ctx, userID}
	for _, e := range mmDelete.expectations {
		if minimock.Equal(e.params, mmDelete.defaultExpectation.params) {
			mmDelete.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDelete.defaultExpectation.params)
		}
	}

	return mmDelete
}

// ExpectCtxParam1 sets up expected param ctx for CacheUserService.Delete
func (mmDelete *mCacheUserServiceMockDelete) ExpectCtxParam1(ctx context.Context) *mCacheUserServiceMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("CacheUserServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &CacheUserServiceMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.params != nil {
		mmDelete.mock.t.Fatalf("CacheUserServiceMock.Delete mock is already set by Expect")
	}

	if mmDelete.defaultExpectation.paramPtrs == nil {
		mmDelete.defaultExpectation.paramPtrs = &CacheUserServiceMockDeleteParamPtrs{}
	}
	mmDelete.defaultExpectation.paramPtrs.ctx = &ctx

	return mmDelete
}

// ExpectUserIDParam2 sets up expected param userID for CacheUserService.Delete
func (mmDelete *mCacheUserServiceMockDelete) ExpectUserIDParam2(userID int64) *mCacheUserServiceMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("CacheUserServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &CacheUserServiceMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.params != nil {
		mmDelete.mock.t.Fatalf("CacheUserServiceMock.Delete mock is already set by Expect")
	}

	if mmDelete.defaultExpectation.paramPtrs == nil {
		mmDelete.defaultExpectation.paramPtrs = &CacheUserServiceMockDeleteParamPtrs{}
	}
	mmDelete.defaultExpectation.paramPtrs.userID = &userID

	return mmDelete
}

// Inspect accepts an inspector function that has same arguments as the CacheUserService.Delete
func (mmDelete *mCacheUserServiceMockDelete) Inspect(f func(ctx context.Context, userID int64)) *mCacheUserServiceMockDelete {
	if mmDelete.mock.inspectFuncDelete != nil {
		mmDelete.mock.t.Fatalf("Inspect function is already set for CacheUserServiceMock.Delete")
	}

	mmDelete.mock.inspectFuncDelete = f

	return mmDelete
}

// Return sets up results that will be returned by CacheUserService.Delete
func (mmDelete *mCacheUserServiceMockDelete) Return(err error) *CacheUserServiceMock {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("CacheUserServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &CacheUserServiceMockDeleteExpectation{mock: mmDelete.mock}
	}
	mmDelete.defaultExpectation.results = &CacheUserServiceMockDeleteResults{err}
	return mmDelete.mock
}

// Set uses given function f to mock the CacheUserService.Delete method
func (mmDelete *mCacheUserServiceMockDelete) Set(f func(ctx context.Context, userID int64) (err error)) *CacheUserServiceMock {
	if mmDelete.defaultExpectation != nil {
		mmDelete.mock.t.Fatalf("Default expectation is already set for the CacheUserService.Delete method")
	}

	if len(mmDelete.expectations) > 0 {
		mmDelete.mock.t.Fatalf("Some expectations are already set for the CacheUserService.Delete method")
	}

	mmDelete.mock.funcDelete = f
	return mmDelete.mock
}

// When sets expectation for the CacheUserService.Delete which will trigger the result defined by the following
// Then helper
func (mmDelete *mCacheUserServiceMockDelete) When(ctx context.Context, userID int64) *CacheUserServiceMockDeleteExpectation {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("CacheUserServiceMock.Delete mock is already set by Set")
	}

	expectation := &CacheUserServiceMockDeleteExpectation{
		mock:   mmDelete.mock,
		params: &CacheUserServiceMockDeleteParams{ctx, userID},
	}
	mmDelete.expectations = append(mmDelete.expectations, expectation)
	return expectation
}

// Then sets up CacheUserService.Delete return parameters for the expectation previously defined by the When method
func (e *CacheUserServiceMockDeleteExpectation) Then(err error) *CacheUserServiceMock {
	e.results = &CacheUserServiceMockDeleteResults{err}
	return e.mock
}

// Times sets number of times CacheUserService.Delete should be invoked
func (mmDelete *mCacheUserServiceMockDelete) Times(n uint64) *mCacheUserServiceMockDelete {
	if n == 0 {
		mmDelete.mock.t.Fatalf("Times of CacheUserServiceMock.Delete mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDelete.expectedInvocations, n)
	return mmDelete
}

func (mmDelete *mCacheUserServiceMockDelete) invocationsDone() bool {
	if len(mmDelete.expectations) == 0 && mmDelete.defaultExpectation == nil && mmDelete.mock.funcDelete == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDelete.mock.afterDeleteCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDelete.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Delete implements service.CacheUserService
func (mmDelete *CacheUserServiceMock) Delete(ctx context.Context, userID int64) (err error) {
	mm_atomic.AddUint64(&mmDelete.beforeDeleteCounter, 1)
	defer mm_atomic.AddUint64(&mmDelete.afterDeleteCounter, 1)

	if mmDelete.inspectFuncDelete != nil {
		mmDelete.inspectFuncDelete(ctx, userID)
	}

	mm_params := CacheUserServiceMockDeleteParams{ctx, userID}

	// Record call args
	mmDelete.DeleteMock.mutex.Lock()
	mmDelete.DeleteMock.callArgs = append(mmDelete.DeleteMock.callArgs, &mm_params)
	mmDelete.DeleteMock.mutex.Unlock()

	for _, e := range mmDelete.DeleteMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDelete.DeleteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDelete.DeleteMock.defaultExpectation.Counter, 1)
		mm_want := mmDelete.DeleteMock.defaultExpectation.params
		mm_want_ptrs := mmDelete.DeleteMock.defaultExpectation.paramPtrs

		mm_got := CacheUserServiceMockDeleteParams{ctx, userID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDelete.t.Errorf("CacheUserServiceMock.Delete got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.userID != nil && !minimock.Equal(*mm_want_ptrs.userID, mm_got.userID) {
				mmDelete.t.Errorf("CacheUserServiceMock.Delete got unexpected parameter userID, want: %#v, got: %#v%s\n", *mm_want_ptrs.userID, mm_got.userID, minimock.Diff(*mm_want_ptrs.userID, mm_got.userID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDelete.t.Errorf("CacheUserServiceMock.Delete got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDelete.DeleteMock.defaultExpectation.results
		if mm_results == nil {
			mmDelete.t.Fatal("No results are set for the CacheUserServiceMock.Delete")
		}
		return (*mm_results).err
	}
	if mmDelete.funcDelete != nil {
		return mmDelete.funcDelete(ctx, userID)
	}
	mmDelete.t.Fatalf("Unexpected call to CacheUserServiceMock.Delete. %v %v", ctx, userID)
	return
}

// DeleteAfterCounter returns a count of finished CacheUserServiceMock.Delete invocations
func (mmDelete *CacheUserServiceMock) DeleteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.afterDeleteCounter)
}

// DeleteBeforeCounter returns a count of CacheUserServiceMock.Delete invocations
func (mmDelete *CacheUserServiceMock) DeleteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.beforeDeleteCounter)
}

// Calls returns a list of arguments used in each call to CacheUserServiceMock.Delete.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDelete *mCacheUserServiceMockDelete) Calls() []*CacheUserServiceMockDeleteParams {
	mmDelete.mutex.RLock()

	argCopy := make([]*CacheUserServiceMockDeleteParams, len(mmDelete.callArgs))
	copy(argCopy, mmDelete.callArgs)

	mmDelete.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteDone returns true if the count of the Delete invocations corresponds
// the number of defined expectations
func (m *CacheUserServiceMock) MinimockDeleteDone() bool {
	if m.DeleteMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteMock.invocationsDone()
}

// MinimockDeleteInspect logs each unmet expectation
func (m *CacheUserServiceMock) MinimockDeleteInspect() {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CacheUserServiceMock.Delete with params: %#v", *e.params)
		}
	}

	afterDeleteCounter := mm_atomic.LoadUint64(&m.afterDeleteCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && afterDeleteCounter < 1 {
		if m.DeleteMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CacheUserServiceMock.Delete")
		} else {
			m.t.Errorf("Expected call to CacheUserServiceMock.Delete with params: %#v", *m.DeleteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && afterDeleteCounter < 1 {
		m.t.Error("Expected call to CacheUserServiceMock.Delete")
	}

	if !m.DeleteMock.invocationsDone() && afterDeleteCounter > 0 {
		m.t.Errorf("Expected %d calls to CacheUserServiceMock.Delete but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteMock.expectedInvocations), afterDeleteCounter)
	}
}

type mCacheUserServiceMockGet struct {
	optional           bool
	mock               *CacheUserServiceMock
	defaultExpectation *CacheUserServiceMockGetExpectation
	expectations       []*CacheUserServiceMockGetExpectation

	callArgs []*CacheUserServiceMockGetParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// CacheUserServiceMockGetExpectation specifies expectation struct of the CacheUserService.Get
type CacheUserServiceMockGetExpectation struct {
	mock      *CacheUserServiceMock
	params    *CacheUserServiceMockGetParams
	paramPtrs *CacheUserServiceMockGetParamPtrs
	results   *CacheUserServiceMockGetResults
	Counter   uint64
}

// CacheUserServiceMockGetParams contains parameters of the CacheUserService.Get
type CacheUserServiceMockGetParams struct {
	ctx    context.Context
	userID int64
}

// CacheUserServiceMockGetParamPtrs contains pointers to parameters of the CacheUserService.Get
type CacheUserServiceMockGetParamPtrs struct {
	ctx    *context.Context
	userID *int64
}

// CacheUserServiceMockGetResults contains results of the CacheUserService.Get
type CacheUserServiceMockGetResults struct {
	up1 *model.User
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGet *mCacheUserServiceMockGet) Optional() *mCacheUserServiceMockGet {
	mmGet.optional = true
	return mmGet
}

// Expect sets up expected params for CacheUserService.Get
func (mmGet *mCacheUserServiceMockGet) Expect(ctx context.Context, userID int64) *mCacheUserServiceMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("CacheUserServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &CacheUserServiceMockGetExpectation{}
	}

	if mmGet.defaultExpectation.paramPtrs != nil {
		mmGet.mock.t.Fatalf("CacheUserServiceMock.Get mock is already set by ExpectParams functions")
	}

	mmGet.defaultExpectation.params = &CacheUserServiceMockGetParams{ctx, userID}
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// ExpectCtxParam1 sets up expected param ctx for CacheUserService.Get
func (mmGet *mCacheUserServiceMockGet) ExpectCtxParam1(ctx context.Context) *mCacheUserServiceMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("CacheUserServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &CacheUserServiceMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("CacheUserServiceMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &CacheUserServiceMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGet
}

// ExpectUserIDParam2 sets up expected param userID for CacheUserService.Get
func (mmGet *mCacheUserServiceMockGet) ExpectUserIDParam2(userID int64) *mCacheUserServiceMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("CacheUserServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &CacheUserServiceMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("CacheUserServiceMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &CacheUserServiceMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.userID = &userID

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the CacheUserService.Get
func (mmGet *mCacheUserServiceMockGet) Inspect(f func(ctx context.Context, userID int64)) *mCacheUserServiceMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for CacheUserServiceMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by CacheUserService.Get
func (mmGet *mCacheUserServiceMockGet) Return(up1 *model.User, err error) *CacheUserServiceMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("CacheUserServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &CacheUserServiceMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &CacheUserServiceMockGetResults{up1, err}
	return mmGet.mock
}

// Set uses given function f to mock the CacheUserService.Get method
func (mmGet *mCacheUserServiceMockGet) Set(f func(ctx context.Context, userID int64) (up1 *model.User, err error)) *CacheUserServiceMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the CacheUserService.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the CacheUserService.Get method")
	}

	mmGet.mock.funcGet = f
	return mmGet.mock
}

// When sets expectation for the CacheUserService.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mCacheUserServiceMockGet) When(ctx context.Context, userID int64) *CacheUserServiceMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("CacheUserServiceMock.Get mock is already set by Set")
	}

	expectation := &CacheUserServiceMockGetExpectation{
		mock:   mmGet.mock,
		params: &CacheUserServiceMockGetParams{ctx, userID},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up CacheUserService.Get return parameters for the expectation previously defined by the When method
func (e *CacheUserServiceMockGetExpectation) Then(up1 *model.User, err error) *CacheUserServiceMock {
	e.results = &CacheUserServiceMockGetResults{up1, err}
	return e.mock
}

// Times sets number of times CacheUserService.Get should be invoked
func (mmGet *mCacheUserServiceMockGet) Times(n uint64) *mCacheUserServiceMockGet {
	if n == 0 {
		mmGet.mock.t.Fatalf("Times of CacheUserServiceMock.Get mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGet.expectedInvocations, n)
	return mmGet
}

func (mmGet *mCacheUserServiceMockGet) invocationsDone() bool {
	if len(mmGet.expectations) == 0 && mmGet.defaultExpectation == nil && mmGet.mock.funcGet == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGet.mock.afterGetCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGet.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Get implements service.CacheUserService
func (mmGet *CacheUserServiceMock) Get(ctx context.Context, userID int64) (up1 *model.User, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(ctx, userID)
	}

	mm_params := CacheUserServiceMockGetParams{ctx, userID}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, &mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_want_ptrs := mmGet.GetMock.defaultExpectation.paramPtrs

		mm_got := CacheUserServiceMockGetParams{ctx, userID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGet.t.Errorf("CacheUserServiceMock.Get got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.userID != nil && !minimock.Equal(*mm_want_ptrs.userID, mm_got.userID) {
				mmGet.t.Errorf("CacheUserServiceMock.Get got unexpected parameter userID, want: %#v, got: %#v%s\n", *mm_want_ptrs.userID, mm_got.userID, minimock.Diff(*mm_want_ptrs.userID, mm_got.userID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("CacheUserServiceMock.Get got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the CacheUserServiceMock.Get")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(ctx, userID)
	}
	mmGet.t.Fatalf("Unexpected call to CacheUserServiceMock.Get. %v %v", ctx, userID)
	return
}

// GetAfterCounter returns a count of finished CacheUserServiceMock.Get invocations
func (mmGet *CacheUserServiceMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of CacheUserServiceMock.Get invocations
func (mmGet *CacheUserServiceMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to CacheUserServiceMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mCacheUserServiceMockGet) Calls() []*CacheUserServiceMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*CacheUserServiceMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *CacheUserServiceMock) MinimockGetDone() bool {
	if m.GetMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetMock.invocationsDone()
}

// MinimockGetInspect logs each unmet expectation
func (m *CacheUserServiceMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CacheUserServiceMock.Get with params: %#v", *e.params)
		}
	}

	afterGetCounter := mm_atomic.LoadUint64(&m.afterGetCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && afterGetCounter < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CacheUserServiceMock.Get")
		} else {
			m.t.Errorf("Expected call to CacheUserServiceMock.Get with params: %#v", *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && afterGetCounter < 1 {
		m.t.Error("Expected call to CacheUserServiceMock.Get")
	}

	if !m.GetMock.invocationsDone() && afterGetCounter > 0 {
		m.t.Errorf("Expected %d calls to CacheUserServiceMock.Get but found %d calls",
			mm_atomic.LoadUint64(&m.GetMock.expectedInvocations), afterGetCounter)
	}
}

type mCacheUserServiceMockGetList struct {
	optional           bool
	mock               *CacheUserServiceMock
	defaultExpectation *CacheUserServiceMockGetListExpectation
	expectations       []*CacheUserServiceMockGetListExpectation

	callArgs []*CacheUserServiceMockGetListParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// CacheUserServiceMockGetListExpectation specifies expectation struct of the CacheUserService.GetList
type CacheUserServiceMockGetListExpectation struct {
	mock      *CacheUserServiceMock
	params    *CacheUserServiceMockGetListParams
	paramPtrs *CacheUserServiceMockGetListParamPtrs
	results   *CacheUserServiceMockGetListResults
	Counter   uint64
}

// CacheUserServiceMockGetListParams contains parameters of the CacheUserService.GetList
type CacheUserServiceMockGetListParams struct {
	ctx   context.Context
	limit pagination.Limit
}

// CacheUserServiceMockGetListParamPtrs contains pointers to parameters of the CacheUserService.GetList
type CacheUserServiceMockGetListParamPtrs struct {
	ctx   *context.Context
	limit *pagination.Limit
}

// CacheUserServiceMockGetListResults contains results of the CacheUserService.GetList
type CacheUserServiceMockGetListResults struct {
	ua1 []model.User
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetList *mCacheUserServiceMockGetList) Optional() *mCacheUserServiceMockGetList {
	mmGetList.optional = true
	return mmGetList
}

// Expect sets up expected params for CacheUserService.GetList
func (mmGetList *mCacheUserServiceMockGetList) Expect(ctx context.Context, limit pagination.Limit) *mCacheUserServiceMockGetList {
	if mmGetList.mock.funcGetList != nil {
		mmGetList.mock.t.Fatalf("CacheUserServiceMock.GetList mock is already set by Set")
	}

	if mmGetList.defaultExpectation == nil {
		mmGetList.defaultExpectation = &CacheUserServiceMockGetListExpectation{}
	}

	if mmGetList.defaultExpectation.paramPtrs != nil {
		mmGetList.mock.t.Fatalf("CacheUserServiceMock.GetList mock is already set by ExpectParams functions")
	}

	mmGetList.defaultExpectation.params = &CacheUserServiceMockGetListParams{ctx, limit}
	for _, e := range mmGetList.expectations {
		if minimock.Equal(e.params, mmGetList.defaultExpectation.params) {
			mmGetList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetList.defaultExpectation.params)
		}
	}

	return mmGetList
}

// ExpectCtxParam1 sets up expected param ctx for CacheUserService.GetList
func (mmGetList *mCacheUserServiceMockGetList) ExpectCtxParam1(ctx context.Context) *mCacheUserServiceMockGetList {
	if mmGetList.mock.funcGetList != nil {
		mmGetList.mock.t.Fatalf("CacheUserServiceMock.GetList mock is already set by Set")
	}

	if mmGetList.defaultExpectation == nil {
		mmGetList.defaultExpectation = &CacheUserServiceMockGetListExpectation{}
	}

	if mmGetList.defaultExpectation.params != nil {
		mmGetList.mock.t.Fatalf("CacheUserServiceMock.GetList mock is already set by Expect")
	}

	if mmGetList.defaultExpectation.paramPtrs == nil {
		mmGetList.defaultExpectation.paramPtrs = &CacheUserServiceMockGetListParamPtrs{}
	}
	mmGetList.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGetList
}

// ExpectLimitParam2 sets up expected param limit for CacheUserService.GetList
func (mmGetList *mCacheUserServiceMockGetList) ExpectLimitParam2(limit pagination.Limit) *mCacheUserServiceMockGetList {
	if mmGetList.mock.funcGetList != nil {
		mmGetList.mock.t.Fatalf("CacheUserServiceMock.GetList mock is already set by Set")
	}

	if mmGetList.defaultExpectation == nil {
		mmGetList.defaultExpectation = &CacheUserServiceMockGetListExpectation{}
	}

	if mmGetList.defaultExpectation.params != nil {
		mmGetList.mock.t.Fatalf("CacheUserServiceMock.GetList mock is already set by Expect")
	}

	if mmGetList.defaultExpectation.paramPtrs == nil {
		mmGetList.defaultExpectation.paramPtrs = &CacheUserServiceMockGetListParamPtrs{}
	}
	mmGetList.defaultExpectation.paramPtrs.limit = &limit

	return mmGetList
}

// Inspect accepts an inspector function that has same arguments as the CacheUserService.GetList
func (mmGetList *mCacheUserServiceMockGetList) Inspect(f func(ctx context.Context, limit pagination.Limit)) *mCacheUserServiceMockGetList {
	if mmGetList.mock.inspectFuncGetList != nil {
		mmGetList.mock.t.Fatalf("Inspect function is already set for CacheUserServiceMock.GetList")
	}

	mmGetList.mock.inspectFuncGetList = f

	return mmGetList
}

// Return sets up results that will be returned by CacheUserService.GetList
func (mmGetList *mCacheUserServiceMockGetList) Return(ua1 []model.User, err error) *CacheUserServiceMock {
	if mmGetList.mock.funcGetList != nil {
		mmGetList.mock.t.Fatalf("CacheUserServiceMock.GetList mock is already set by Set")
	}

	if mmGetList.defaultExpectation == nil {
		mmGetList.defaultExpectation = &CacheUserServiceMockGetListExpectation{mock: mmGetList.mock}
	}
	mmGetList.defaultExpectation.results = &CacheUserServiceMockGetListResults{ua1, err}
	return mmGetList.mock
}

// Set uses given function f to mock the CacheUserService.GetList method
func (mmGetList *mCacheUserServiceMockGetList) Set(f func(ctx context.Context, limit pagination.Limit) (ua1 []model.User, err error)) *CacheUserServiceMock {
	if mmGetList.defaultExpectation != nil {
		mmGetList.mock.t.Fatalf("Default expectation is already set for the CacheUserService.GetList method")
	}

	if len(mmGetList.expectations) > 0 {
		mmGetList.mock.t.Fatalf("Some expectations are already set for the CacheUserService.GetList method")
	}

	mmGetList.mock.funcGetList = f
	return mmGetList.mock
}

// When sets expectation for the CacheUserService.GetList which will trigger the result defined by the following
// Then helper
func (mmGetList *mCacheUserServiceMockGetList) When(ctx context.Context, limit pagination.Limit) *CacheUserServiceMockGetListExpectation {
	if mmGetList.mock.funcGetList != nil {
		mmGetList.mock.t.Fatalf("CacheUserServiceMock.GetList mock is already set by Set")
	}

	expectation := &CacheUserServiceMockGetListExpectation{
		mock:   mmGetList.mock,
		params: &CacheUserServiceMockGetListParams{ctx, limit},
	}
	mmGetList.expectations = append(mmGetList.expectations, expectation)
	return expectation
}

// Then sets up CacheUserService.GetList return parameters for the expectation previously defined by the When method
func (e *CacheUserServiceMockGetListExpectation) Then(ua1 []model.User, err error) *CacheUserServiceMock {
	e.results = &CacheUserServiceMockGetListResults{ua1, err}
	return e.mock
}

// Times sets number of times CacheUserService.GetList should be invoked
func (mmGetList *mCacheUserServiceMockGetList) Times(n uint64) *mCacheUserServiceMockGetList {
	if n == 0 {
		mmGetList.mock.t.Fatalf("Times of CacheUserServiceMock.GetList mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetList.expectedInvocations, n)
	return mmGetList
}

func (mmGetList *mCacheUserServiceMockGetList) invocationsDone() bool {
	if len(mmGetList.expectations) == 0 && mmGetList.defaultExpectation == nil && mmGetList.mock.funcGetList == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetList.mock.afterGetListCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetList.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetList implements service.CacheUserService
func (mmGetList *CacheUserServiceMock) GetList(ctx context.Context, limit pagination.Limit) (ua1 []model.User, err error) {
	mm_atomic.AddUint64(&mmGetList.beforeGetListCounter, 1)
	defer mm_atomic.AddUint64(&mmGetList.afterGetListCounter, 1)

	if mmGetList.inspectFuncGetList != nil {
		mmGetList.inspectFuncGetList(ctx, limit)
	}

	mm_params := CacheUserServiceMockGetListParams{ctx, limit}

	// Record call args
	mmGetList.GetListMock.mutex.Lock()
	mmGetList.GetListMock.callArgs = append(mmGetList.GetListMock.callArgs, &mm_params)
	mmGetList.GetListMock.mutex.Unlock()

	for _, e := range mmGetList.GetListMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ua1, e.results.err
		}
	}

	if mmGetList.GetListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetList.GetListMock.defaultExpectation.Counter, 1)
		mm_want := mmGetList.GetListMock.defaultExpectation.params
		mm_want_ptrs := mmGetList.GetListMock.defaultExpectation.paramPtrs

		mm_got := CacheUserServiceMockGetListParams{ctx, limit}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetList.t.Errorf("CacheUserServiceMock.GetList got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.limit != nil && !minimock.Equal(*mm_want_ptrs.limit, mm_got.limit) {
				mmGetList.t.Errorf("CacheUserServiceMock.GetList got unexpected parameter limit, want: %#v, got: %#v%s\n", *mm_want_ptrs.limit, mm_got.limit, minimock.Diff(*mm_want_ptrs.limit, mm_got.limit))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetList.t.Errorf("CacheUserServiceMock.GetList got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetList.GetListMock.defaultExpectation.results
		if mm_results == nil {
			mmGetList.t.Fatal("No results are set for the CacheUserServiceMock.GetList")
		}
		return (*mm_results).ua1, (*mm_results).err
	}
	if mmGetList.funcGetList != nil {
		return mmGetList.funcGetList(ctx, limit)
	}
	mmGetList.t.Fatalf("Unexpected call to CacheUserServiceMock.GetList. %v %v", ctx, limit)
	return
}

// GetListAfterCounter returns a count of finished CacheUserServiceMock.GetList invocations
func (mmGetList *CacheUserServiceMock) GetListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetList.afterGetListCounter)
}

// GetListBeforeCounter returns a count of CacheUserServiceMock.GetList invocations
func (mmGetList *CacheUserServiceMock) GetListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetList.beforeGetListCounter)
}

// Calls returns a list of arguments used in each call to CacheUserServiceMock.GetList.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetList *mCacheUserServiceMockGetList) Calls() []*CacheUserServiceMockGetListParams {
	mmGetList.mutex.RLock()

	argCopy := make([]*CacheUserServiceMockGetListParams, len(mmGetList.callArgs))
	copy(argCopy, mmGetList.callArgs)

	mmGetList.mutex.RUnlock()

	return argCopy
}

// MinimockGetListDone returns true if the count of the GetList invocations corresponds
// the number of defined expectations
func (m *CacheUserServiceMock) MinimockGetListDone() bool {
	if m.GetListMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetListMock.invocationsDone()
}

// MinimockGetListInspect logs each unmet expectation
func (m *CacheUserServiceMock) MinimockGetListInspect() {
	for _, e := range m.GetListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CacheUserServiceMock.GetList with params: %#v", *e.params)
		}
	}

	afterGetListCounter := mm_atomic.LoadUint64(&m.afterGetListCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetListMock.defaultExpectation != nil && afterGetListCounter < 1 {
		if m.GetListMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CacheUserServiceMock.GetList")
		} else {
			m.t.Errorf("Expected call to CacheUserServiceMock.GetList with params: %#v", *m.GetListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetList != nil && afterGetListCounter < 1 {
		m.t.Error("Expected call to CacheUserServiceMock.GetList")
	}

	if !m.GetListMock.invocationsDone() && afterGetListCounter > 0 {
		m.t.Errorf("Expected %d calls to CacheUserServiceMock.GetList but found %d calls",
			mm_atomic.LoadUint64(&m.GetListMock.expectedInvocations), afterGetListCounter)
	}
}

type mCacheUserServiceMockSet struct {
	optional           bool
	mock               *CacheUserServiceMock
	defaultExpectation *CacheUserServiceMockSetExpectation
	expectations       []*CacheUserServiceMockSetExpectation

	callArgs []*CacheUserServiceMockSetParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// CacheUserServiceMockSetExpectation specifies expectation struct of the CacheUserService.Set
type CacheUserServiceMockSetExpectation struct {
	mock      *CacheUserServiceMock
	params    *CacheUserServiceMockSetParams
	paramPtrs *CacheUserServiceMockSetParamPtrs
	results   *CacheUserServiceMockSetResults
	Counter   uint64
}

// CacheUserServiceMockSetParams contains parameters of the CacheUserService.Set
type CacheUserServiceMockSetParams struct {
	ctx  context.Context
	user *model.User
}

// CacheUserServiceMockSetParamPtrs contains pointers to parameters of the CacheUserService.Set
type CacheUserServiceMockSetParamPtrs struct {
	ctx  *context.Context
	user **model.User
}

// CacheUserServiceMockSetResults contains results of the CacheUserService.Set
type CacheUserServiceMockSetResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSet *mCacheUserServiceMockSet) Optional() *mCacheUserServiceMockSet {
	mmSet.optional = true
	return mmSet
}

// Expect sets up expected params for CacheUserService.Set
func (mmSet *mCacheUserServiceMockSet) Expect(ctx context.Context, user *model.User) *mCacheUserServiceMockSet {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("CacheUserServiceMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &CacheUserServiceMockSetExpectation{}
	}

	if mmSet.defaultExpectation.paramPtrs != nil {
		mmSet.mock.t.Fatalf("CacheUserServiceMock.Set mock is already set by ExpectParams functions")
	}

	mmSet.defaultExpectation.params = &CacheUserServiceMockSetParams{ctx, user}
	for _, e := range mmSet.expectations {
		if minimock.Equal(e.params, mmSet.defaultExpectation.params) {
			mmSet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSet.defaultExpectation.params)
		}
	}

	return mmSet
}

// ExpectCtxParam1 sets up expected param ctx for CacheUserService.Set
func (mmSet *mCacheUserServiceMockSet) ExpectCtxParam1(ctx context.Context) *mCacheUserServiceMockSet {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("CacheUserServiceMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &CacheUserServiceMockSetExpectation{}
	}

	if mmSet.defaultExpectation.params != nil {
		mmSet.mock.t.Fatalf("CacheUserServiceMock.Set mock is already set by Expect")
	}

	if mmSet.defaultExpectation.paramPtrs == nil {
		mmSet.defaultExpectation.paramPtrs = &CacheUserServiceMockSetParamPtrs{}
	}
	mmSet.defaultExpectation.paramPtrs.ctx = &ctx

	return mmSet
}

// ExpectUserParam2 sets up expected param user for CacheUserService.Set
func (mmSet *mCacheUserServiceMockSet) ExpectUserParam2(user *model.User) *mCacheUserServiceMockSet {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("CacheUserServiceMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &CacheUserServiceMockSetExpectation{}
	}

	if mmSet.defaultExpectation.params != nil {
		mmSet.mock.t.Fatalf("CacheUserServiceMock.Set mock is already set by Expect")
	}

	if mmSet.defaultExpectation.paramPtrs == nil {
		mmSet.defaultExpectation.paramPtrs = &CacheUserServiceMockSetParamPtrs{}
	}
	mmSet.defaultExpectation.paramPtrs.user = &user

	return mmSet
}

// Inspect accepts an inspector function that has same arguments as the CacheUserService.Set
func (mmSet *mCacheUserServiceMockSet) Inspect(f func(ctx context.Context, user *model.User)) *mCacheUserServiceMockSet {
	if mmSet.mock.inspectFuncSet != nil {
		mmSet.mock.t.Fatalf("Inspect function is already set for CacheUserServiceMock.Set")
	}

	mmSet.mock.inspectFuncSet = f

	return mmSet
}

// Return sets up results that will be returned by CacheUserService.Set
func (mmSet *mCacheUserServiceMockSet) Return(err error) *CacheUserServiceMock {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("CacheUserServiceMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &CacheUserServiceMockSetExpectation{mock: mmSet.mock}
	}
	mmSet.defaultExpectation.results = &CacheUserServiceMockSetResults{err}
	return mmSet.mock
}

// Set uses given function f to mock the CacheUserService.Set method
func (mmSet *mCacheUserServiceMockSet) Set(f func(ctx context.Context, user *model.User) (err error)) *CacheUserServiceMock {
	if mmSet.defaultExpectation != nil {
		mmSet.mock.t.Fatalf("Default expectation is already set for the CacheUserService.Set method")
	}

	if len(mmSet.expectations) > 0 {
		mmSet.mock.t.Fatalf("Some expectations are already set for the CacheUserService.Set method")
	}

	mmSet.mock.funcSet = f
	return mmSet.mock
}

// When sets expectation for the CacheUserService.Set which will trigger the result defined by the following
// Then helper
func (mmSet *mCacheUserServiceMockSet) When(ctx context.Context, user *model.User) *CacheUserServiceMockSetExpectation {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("CacheUserServiceMock.Set mock is already set by Set")
	}

	expectation := &CacheUserServiceMockSetExpectation{
		mock:   mmSet.mock,
		params: &CacheUserServiceMockSetParams{ctx, user},
	}
	mmSet.expectations = append(mmSet.expectations, expectation)
	return expectation
}

// Then sets up CacheUserService.Set return parameters for the expectation previously defined by the When method
func (e *CacheUserServiceMockSetExpectation) Then(err error) *CacheUserServiceMock {
	e.results = &CacheUserServiceMockSetResults{err}
	return e.mock
}

// Times sets number of times CacheUserService.Set should be invoked
func (mmSet *mCacheUserServiceMockSet) Times(n uint64) *mCacheUserServiceMockSet {
	if n == 0 {
		mmSet.mock.t.Fatalf("Times of CacheUserServiceMock.Set mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSet.expectedInvocations, n)
	return mmSet
}

func (mmSet *mCacheUserServiceMockSet) invocationsDone() bool {
	if len(mmSet.expectations) == 0 && mmSet.defaultExpectation == nil && mmSet.mock.funcSet == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSet.mock.afterSetCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSet.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Set implements service.CacheUserService
func (mmSet *CacheUserServiceMock) Set(ctx context.Context, user *model.User) (err error) {
	mm_atomic.AddUint64(&mmSet.beforeSetCounter, 1)
	defer mm_atomic.AddUint64(&mmSet.afterSetCounter, 1)

	if mmSet.inspectFuncSet != nil {
		mmSet.inspectFuncSet(ctx, user)
	}

	mm_params := CacheUserServiceMockSetParams{ctx, user}

	// Record call args
	mmSet.SetMock.mutex.Lock()
	mmSet.SetMock.callArgs = append(mmSet.SetMock.callArgs, &mm_params)
	mmSet.SetMock.mutex.Unlock()

	for _, e := range mmSet.SetMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSet.SetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSet.SetMock.defaultExpectation.Counter, 1)
		mm_want := mmSet.SetMock.defaultExpectation.params
		mm_want_ptrs := mmSet.SetMock.defaultExpectation.paramPtrs

		mm_got := CacheUserServiceMockSetParams{ctx, user}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSet.t.Errorf("CacheUserServiceMock.Set got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.user != nil && !minimock.Equal(*mm_want_ptrs.user, mm_got.user) {
				mmSet.t.Errorf("CacheUserServiceMock.Set got unexpected parameter user, want: %#v, got: %#v%s\n", *mm_want_ptrs.user, mm_got.user, minimock.Diff(*mm_want_ptrs.user, mm_got.user))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSet.t.Errorf("CacheUserServiceMock.Set got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSet.SetMock.defaultExpectation.results
		if mm_results == nil {
			mmSet.t.Fatal("No results are set for the CacheUserServiceMock.Set")
		}
		return (*mm_results).err
	}
	if mmSet.funcSet != nil {
		return mmSet.funcSet(ctx, user)
	}
	mmSet.t.Fatalf("Unexpected call to CacheUserServiceMock.Set. %v %v", ctx, user)
	return
}

// SetAfterCounter returns a count of finished CacheUserServiceMock.Set invocations
func (mmSet *CacheUserServiceMock) SetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSet.afterSetCounter)
}

// SetBeforeCounter returns a count of CacheUserServiceMock.Set invocations
func (mmSet *CacheUserServiceMock) SetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSet.beforeSetCounter)
}

// Calls returns a list of arguments used in each call to CacheUserServiceMock.Set.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSet *mCacheUserServiceMockSet) Calls() []*CacheUserServiceMockSetParams {
	mmSet.mutex.RLock()

	argCopy := make([]*CacheUserServiceMockSetParams, len(mmSet.callArgs))
	copy(argCopy, mmSet.callArgs)

	mmSet.mutex.RUnlock()

	return argCopy
}

// MinimockSetDone returns true if the count of the Set invocations corresponds
// the number of defined expectations
func (m *CacheUserServiceMock) MinimockSetDone() bool {
	if m.SetMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SetMock.invocationsDone()
}

// MinimockSetInspect logs each unmet expectation
func (m *CacheUserServiceMock) MinimockSetInspect() {
	for _, e := range m.SetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CacheUserServiceMock.Set with params: %#v", *e.params)
		}
	}

	afterSetCounter := mm_atomic.LoadUint64(&m.afterSetCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SetMock.defaultExpectation != nil && afterSetCounter < 1 {
		if m.SetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CacheUserServiceMock.Set")
		} else {
			m.t.Errorf("Expected call to CacheUserServiceMock.Set with params: %#v", *m.SetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSet != nil && afterSetCounter < 1 {
		m.t.Error("Expected call to CacheUserServiceMock.Set")
	}

	if !m.SetMock.invocationsDone() && afterSetCounter > 0 {
		m.t.Errorf("Expected %d calls to CacheUserServiceMock.Set but found %d calls",
			mm_atomic.LoadUint64(&m.SetMock.expectedInvocations), afterSetCounter)
	}
}

type mCacheUserServiceMockSetList struct {
	optional           bool
	mock               *CacheUserServiceMock
	defaultExpectation *CacheUserServiceMockSetListExpectation
	expectations       []*CacheUserServiceMockSetListExpectation

	callArgs []*CacheUserServiceMockSetListParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// CacheUserServiceMockSetListExpectation specifies expectation struct of the CacheUserService.SetList
type CacheUserServiceMockSetListExpectation struct {
	mock      *CacheUserServiceMock
	params    *CacheUserServiceMockSetListParams
	paramPtrs *CacheUserServiceMockSetListParamPtrs
	results   *CacheUserServiceMockSetListResults
	Counter   uint64
}

// CacheUserServiceMockSetListParams contains parameters of the CacheUserService.SetList
type CacheUserServiceMockSetListParams struct {
	ctx   context.Context
	users []model.User
	limit pagination.Limit
}

// CacheUserServiceMockSetListParamPtrs contains pointers to parameters of the CacheUserService.SetList
type CacheUserServiceMockSetListParamPtrs struct {
	ctx   *context.Context
	users *[]model.User
	limit *pagination.Limit
}

// CacheUserServiceMockSetListResults contains results of the CacheUserService.SetList
type CacheUserServiceMockSetListResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSetList *mCacheUserServiceMockSetList) Optional() *mCacheUserServiceMockSetList {
	mmSetList.optional = true
	return mmSetList
}

// Expect sets up expected params for CacheUserService.SetList
func (mmSetList *mCacheUserServiceMockSetList) Expect(ctx context.Context, users []model.User, limit pagination.Limit) *mCacheUserServiceMockSetList {
	if mmSetList.mock.funcSetList != nil {
		mmSetList.mock.t.Fatalf("CacheUserServiceMock.SetList mock is already set by Set")
	}

	if mmSetList.defaultExpectation == nil {
		mmSetList.defaultExpectation = &CacheUserServiceMockSetListExpectation{}
	}

	if mmSetList.defaultExpectation.paramPtrs != nil {
		mmSetList.mock.t.Fatalf("CacheUserServiceMock.SetList mock is already set by ExpectParams functions")
	}

	mmSetList.defaultExpectation.params = &CacheUserServiceMockSetListParams{ctx, users, limit}
	for _, e := range mmSetList.expectations {
		if minimock.Equal(e.params, mmSetList.defaultExpectation.params) {
			mmSetList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetList.defaultExpectation.params)
		}
	}

	return mmSetList
}

// ExpectCtxParam1 sets up expected param ctx for CacheUserService.SetList
func (mmSetList *mCacheUserServiceMockSetList) ExpectCtxParam1(ctx context.Context) *mCacheUserServiceMockSetList {
	if mmSetList.mock.funcSetList != nil {
		mmSetList.mock.t.Fatalf("CacheUserServiceMock.SetList mock is already set by Set")
	}

	if mmSetList.defaultExpectation == nil {
		mmSetList.defaultExpectation = &CacheUserServiceMockSetListExpectation{}
	}

	if mmSetList.defaultExpectation.params != nil {
		mmSetList.mock.t.Fatalf("CacheUserServiceMock.SetList mock is already set by Expect")
	}

	if mmSetList.defaultExpectation.paramPtrs == nil {
		mmSetList.defaultExpectation.paramPtrs = &CacheUserServiceMockSetListParamPtrs{}
	}
	mmSetList.defaultExpectation.paramPtrs.ctx = &ctx

	return mmSetList
}

// ExpectUsersParam2 sets up expected param users for CacheUserService.SetList
func (mmSetList *mCacheUserServiceMockSetList) ExpectUsersParam2(users []model.User) *mCacheUserServiceMockSetList {
	if mmSetList.mock.funcSetList != nil {
		mmSetList.mock.t.Fatalf("CacheUserServiceMock.SetList mock is already set by Set")
	}

	if mmSetList.defaultExpectation == nil {
		mmSetList.defaultExpectation = &CacheUserServiceMockSetListExpectation{}
	}

	if mmSetList.defaultExpectation.params != nil {
		mmSetList.mock.t.Fatalf("CacheUserServiceMock.SetList mock is already set by Expect")
	}

	if mmSetList.defaultExpectation.paramPtrs == nil {
		mmSetList.defaultExpectation.paramPtrs = &CacheUserServiceMockSetListParamPtrs{}
	}
	mmSetList.defaultExpectation.paramPtrs.users = &users

	return mmSetList
}

// ExpectLimitParam3 sets up expected param limit for CacheUserService.SetList
func (mmSetList *mCacheUserServiceMockSetList) ExpectLimitParam3(limit pagination.Limit) *mCacheUserServiceMockSetList {
	if mmSetList.mock.funcSetList != nil {
		mmSetList.mock.t.Fatalf("CacheUserServiceMock.SetList mock is already set by Set")
	}

	if mmSetList.defaultExpectation == nil {
		mmSetList.defaultExpectation = &CacheUserServiceMockSetListExpectation{}
	}

	if mmSetList.defaultExpectation.params != nil {
		mmSetList.mock.t.Fatalf("CacheUserServiceMock.SetList mock is already set by Expect")
	}

	if mmSetList.defaultExpectation.paramPtrs == nil {
		mmSetList.defaultExpectation.paramPtrs = &CacheUserServiceMockSetListParamPtrs{}
	}
	mmSetList.defaultExpectation.paramPtrs.limit = &limit

	return mmSetList
}

// Inspect accepts an inspector function that has same arguments as the CacheUserService.SetList
func (mmSetList *mCacheUserServiceMockSetList) Inspect(f func(ctx context.Context, users []model.User, limit pagination.Limit)) *mCacheUserServiceMockSetList {
	if mmSetList.mock.inspectFuncSetList != nil {
		mmSetList.mock.t.Fatalf("Inspect function is already set for CacheUserServiceMock.SetList")
	}

	mmSetList.mock.inspectFuncSetList = f

	return mmSetList
}

// Return sets up results that will be returned by CacheUserService.SetList
func (mmSetList *mCacheUserServiceMockSetList) Return(err error) *CacheUserServiceMock {
	if mmSetList.mock.funcSetList != nil {
		mmSetList.mock.t.Fatalf("CacheUserServiceMock.SetList mock is already set by Set")
	}

	if mmSetList.defaultExpectation == nil {
		mmSetList.defaultExpectation = &CacheUserServiceMockSetListExpectation{mock: mmSetList.mock}
	}
	mmSetList.defaultExpectation.results = &CacheUserServiceMockSetListResults{err}
	return mmSetList.mock
}

// Set uses given function f to mock the CacheUserService.SetList method
func (mmSetList *mCacheUserServiceMockSetList) Set(f func(ctx context.Context, users []model.User, limit pagination.Limit) (err error)) *CacheUserServiceMock {
	if mmSetList.defaultExpectation != nil {
		mmSetList.mock.t.Fatalf("Default expectation is already set for the CacheUserService.SetList method")
	}

	if len(mmSetList.expectations) > 0 {
		mmSetList.mock.t.Fatalf("Some expectations are already set for the CacheUserService.SetList method")
	}

	mmSetList.mock.funcSetList = f
	return mmSetList.mock
}

// When sets expectation for the CacheUserService.SetList which will trigger the result defined by the following
// Then helper
func (mmSetList *mCacheUserServiceMockSetList) When(ctx context.Context, users []model.User, limit pagination.Limit) *CacheUserServiceMockSetListExpectation {
	if mmSetList.mock.funcSetList != nil {
		mmSetList.mock.t.Fatalf("CacheUserServiceMock.SetList mock is already set by Set")
	}

	expectation := &CacheUserServiceMockSetListExpectation{
		mock:   mmSetList.mock,
		params: &CacheUserServiceMockSetListParams{ctx, users, limit},
	}
	mmSetList.expectations = append(mmSetList.expectations, expectation)
	return expectation
}

// Then sets up CacheUserService.SetList return parameters for the expectation previously defined by the When method
func (e *CacheUserServiceMockSetListExpectation) Then(err error) *CacheUserServiceMock {
	e.results = &CacheUserServiceMockSetListResults{err}
	return e.mock
}

// Times sets number of times CacheUserService.SetList should be invoked
func (mmSetList *mCacheUserServiceMockSetList) Times(n uint64) *mCacheUserServiceMockSetList {
	if n == 0 {
		mmSetList.mock.t.Fatalf("Times of CacheUserServiceMock.SetList mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSetList.expectedInvocations, n)
	return mmSetList
}

func (mmSetList *mCacheUserServiceMockSetList) invocationsDone() bool {
	if len(mmSetList.expectations) == 0 && mmSetList.defaultExpectation == nil && mmSetList.mock.funcSetList == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSetList.mock.afterSetListCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSetList.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// SetList implements service.CacheUserService
func (mmSetList *CacheUserServiceMock) SetList(ctx context.Context, users []model.User, limit pagination.Limit) (err error) {
	mm_atomic.AddUint64(&mmSetList.beforeSetListCounter, 1)
	defer mm_atomic.AddUint64(&mmSetList.afterSetListCounter, 1)

	if mmSetList.inspectFuncSetList != nil {
		mmSetList.inspectFuncSetList(ctx, users, limit)
	}

	mm_params := CacheUserServiceMockSetListParams{ctx, users, limit}

	// Record call args
	mmSetList.SetListMock.mutex.Lock()
	mmSetList.SetListMock.callArgs = append(mmSetList.SetListMock.callArgs, &mm_params)
	mmSetList.SetListMock.mutex.Unlock()

	for _, e := range mmSetList.SetListMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSetList.SetListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetList.SetListMock.defaultExpectation.Counter, 1)
		mm_want := mmSetList.SetListMock.defaultExpectation.params
		mm_want_ptrs := mmSetList.SetListMock.defaultExpectation.paramPtrs

		mm_got := CacheUserServiceMockSetListParams{ctx, users, limit}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSetList.t.Errorf("CacheUserServiceMock.SetList got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.users != nil && !minimock.Equal(*mm_want_ptrs.users, mm_got.users) {
				mmSetList.t.Errorf("CacheUserServiceMock.SetList got unexpected parameter users, want: %#v, got: %#v%s\n", *mm_want_ptrs.users, mm_got.users, minimock.Diff(*mm_want_ptrs.users, mm_got.users))
			}

			if mm_want_ptrs.limit != nil && !minimock.Equal(*mm_want_ptrs.limit, mm_got.limit) {
				mmSetList.t.Errorf("CacheUserServiceMock.SetList got unexpected parameter limit, want: %#v, got: %#v%s\n", *mm_want_ptrs.limit, mm_got.limit, minimock.Diff(*mm_want_ptrs.limit, mm_got.limit))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSetList.t.Errorf("CacheUserServiceMock.SetList got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSetList.SetListMock.defaultExpectation.results
		if mm_results == nil {
			mmSetList.t.Fatal("No results are set for the CacheUserServiceMock.SetList")
		}
		return (*mm_results).err
	}
	if mmSetList.funcSetList != nil {
		return mmSetList.funcSetList(ctx, users, limit)
	}
	mmSetList.t.Fatalf("Unexpected call to CacheUserServiceMock.SetList. %v %v %v", ctx, users, limit)
	return
}

// SetListAfterCounter returns a count of finished CacheUserServiceMock.SetList invocations
func (mmSetList *CacheUserServiceMock) SetListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetList.afterSetListCounter)
}

// SetListBeforeCounter returns a count of CacheUserServiceMock.SetList invocations
func (mmSetList *CacheUserServiceMock) SetListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetList.beforeSetListCounter)
}

// Calls returns a list of arguments used in each call to CacheUserServiceMock.SetList.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetList *mCacheUserServiceMockSetList) Calls() []*CacheUserServiceMockSetListParams {
	mmSetList.mutex.RLock()

	argCopy := make([]*CacheUserServiceMockSetListParams, len(mmSetList.callArgs))
	copy(argCopy, mmSetList.callArgs)

	mmSetList.mutex.RUnlock()

	return argCopy
}

// MinimockSetListDone returns true if the count of the SetList invocations corresponds
// the number of defined expectations
func (m *CacheUserServiceMock) MinimockSetListDone() bool {
	if m.SetListMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SetListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SetListMock.invocationsDone()
}

// MinimockSetListInspect logs each unmet expectation
func (m *CacheUserServiceMock) MinimockSetListInspect() {
	for _, e := range m.SetListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CacheUserServiceMock.SetList with params: %#v", *e.params)
		}
	}

	afterSetListCounter := mm_atomic.LoadUint64(&m.afterSetListCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SetListMock.defaultExpectation != nil && afterSetListCounter < 1 {
		if m.SetListMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CacheUserServiceMock.SetList")
		} else {
			m.t.Errorf("Expected call to CacheUserServiceMock.SetList with params: %#v", *m.SetListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetList != nil && afterSetListCounter < 1 {
		m.t.Error("Expected call to CacheUserServiceMock.SetList")
	}

	if !m.SetListMock.invocationsDone() && afterSetListCounter > 0 {
		m.t.Errorf("Expected %d calls to CacheUserServiceMock.SetList but found %d calls",
			mm_atomic.LoadUint64(&m.SetListMock.expectedInvocations), afterSetListCounter)
	}
}

type mCacheUserServiceMockSetPartial struct {
	optional           bool
	mock               *CacheUserServiceMock
	defaultExpectation *CacheUserServiceMockSetPartialExpectation
	expectations       []*CacheUserServiceMockSetPartialExpectation

	callArgs []*CacheUserServiceMockSetPartialParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// CacheUserServiceMockSetPartialExpectation specifies expectation struct of the CacheUserService.SetPartial
type CacheUserServiceMockSetPartialExpectation struct {
	mock      *CacheUserServiceMock
	params    *CacheUserServiceMockSetPartialParams
	paramPtrs *CacheUserServiceMockSetPartialParamPtrs
	results   *CacheUserServiceMockSetPartialResults
	Counter   uint64
}

// CacheUserServiceMockSetPartialParams contains parameters of the CacheUserService.SetPartial
type CacheUserServiceMockSetPartialParams struct {
	ctx  context.Context
	id   int64
	user *model.UpdateUserInfo
}

// CacheUserServiceMockSetPartialParamPtrs contains pointers to parameters of the CacheUserService.SetPartial
type CacheUserServiceMockSetPartialParamPtrs struct {
	ctx  *context.Context
	id   *int64
	user **model.UpdateUserInfo
}

// CacheUserServiceMockSetPartialResults contains results of the CacheUserService.SetPartial
type CacheUserServiceMockSetPartialResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSetPartial *mCacheUserServiceMockSetPartial) Optional() *mCacheUserServiceMockSetPartial {
	mmSetPartial.optional = true
	return mmSetPartial
}

// Expect sets up expected params for CacheUserService.SetPartial
func (mmSetPartial *mCacheUserServiceMockSetPartial) Expect(ctx context.Context, id int64, user *model.UpdateUserInfo) *mCacheUserServiceMockSetPartial {
	if mmSetPartial.mock.funcSetPartial != nil {
		mmSetPartial.mock.t.Fatalf("CacheUserServiceMock.SetPartial mock is already set by Set")
	}

	if mmSetPartial.defaultExpectation == nil {
		mmSetPartial.defaultExpectation = &CacheUserServiceMockSetPartialExpectation{}
	}

	if mmSetPartial.defaultExpectation.paramPtrs != nil {
		mmSetPartial.mock.t.Fatalf("CacheUserServiceMock.SetPartial mock is already set by ExpectParams functions")
	}

	mmSetPartial.defaultExpectation.params = &CacheUserServiceMockSetPartialParams{ctx, id, user}
	for _, e := range mmSetPartial.expectations {
		if minimock.Equal(e.params, mmSetPartial.defaultExpectation.params) {
			mmSetPartial.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetPartial.defaultExpectation.params)
		}
	}

	return mmSetPartial
}

// ExpectCtxParam1 sets up expected param ctx for CacheUserService.SetPartial
func (mmSetPartial *mCacheUserServiceMockSetPartial) ExpectCtxParam1(ctx context.Context) *mCacheUserServiceMockSetPartial {
	if mmSetPartial.mock.funcSetPartial != nil {
		mmSetPartial.mock.t.Fatalf("CacheUserServiceMock.SetPartial mock is already set by Set")
	}

	if mmSetPartial.defaultExpectation == nil {
		mmSetPartial.defaultExpectation = &CacheUserServiceMockSetPartialExpectation{}
	}

	if mmSetPartial.defaultExpectation.params != nil {
		mmSetPartial.mock.t.Fatalf("CacheUserServiceMock.SetPartial mock is already set by Expect")
	}

	if mmSetPartial.defaultExpectation.paramPtrs == nil {
		mmSetPartial.defaultExpectation.paramPtrs = &CacheUserServiceMockSetPartialParamPtrs{}
	}
	mmSetPartial.defaultExpectation.paramPtrs.ctx = &ctx

	return mmSetPartial
}

// ExpectIdParam2 sets up expected param id for CacheUserService.SetPartial
func (mmSetPartial *mCacheUserServiceMockSetPartial) ExpectIdParam2(id int64) *mCacheUserServiceMockSetPartial {
	if mmSetPartial.mock.funcSetPartial != nil {
		mmSetPartial.mock.t.Fatalf("CacheUserServiceMock.SetPartial mock is already set by Set")
	}

	if mmSetPartial.defaultExpectation == nil {
		mmSetPartial.defaultExpectation = &CacheUserServiceMockSetPartialExpectation{}
	}

	if mmSetPartial.defaultExpectation.params != nil {
		mmSetPartial.mock.t.Fatalf("CacheUserServiceMock.SetPartial mock is already set by Expect")
	}

	if mmSetPartial.defaultExpectation.paramPtrs == nil {
		mmSetPartial.defaultExpectation.paramPtrs = &CacheUserServiceMockSetPartialParamPtrs{}
	}
	mmSetPartial.defaultExpectation.paramPtrs.id = &id

	return mmSetPartial
}

// ExpectUserParam3 sets up expected param user for CacheUserService.SetPartial
func (mmSetPartial *mCacheUserServiceMockSetPartial) ExpectUserParam3(user *model.UpdateUserInfo) *mCacheUserServiceMockSetPartial {
	if mmSetPartial.mock.funcSetPartial != nil {
		mmSetPartial.mock.t.Fatalf("CacheUserServiceMock.SetPartial mock is already set by Set")
	}

	if mmSetPartial.defaultExpectation == nil {
		mmSetPartial.defaultExpectation = &CacheUserServiceMockSetPartialExpectation{}
	}

	if mmSetPartial.defaultExpectation.params != nil {
		mmSetPartial.mock.t.Fatalf("CacheUserServiceMock.SetPartial mock is already set by Expect")
	}

	if mmSetPartial.defaultExpectation.paramPtrs == nil {
		mmSetPartial.defaultExpectation.paramPtrs = &CacheUserServiceMockSetPartialParamPtrs{}
	}
	mmSetPartial.defaultExpectation.paramPtrs.user = &user

	return mmSetPartial
}

// Inspect accepts an inspector function that has same arguments as the CacheUserService.SetPartial
func (mmSetPartial *mCacheUserServiceMockSetPartial) Inspect(f func(ctx context.Context, id int64, user *model.UpdateUserInfo)) *mCacheUserServiceMockSetPartial {
	if mmSetPartial.mock.inspectFuncSetPartial != nil {
		mmSetPartial.mock.t.Fatalf("Inspect function is already set for CacheUserServiceMock.SetPartial")
	}

	mmSetPartial.mock.inspectFuncSetPartial = f

	return mmSetPartial
}

// Return sets up results that will be returned by CacheUserService.SetPartial
func (mmSetPartial *mCacheUserServiceMockSetPartial) Return(err error) *CacheUserServiceMock {
	if mmSetPartial.mock.funcSetPartial != nil {
		mmSetPartial.mock.t.Fatalf("CacheUserServiceMock.SetPartial mock is already set by Set")
	}

	if mmSetPartial.defaultExpectation == nil {
		mmSetPartial.defaultExpectation = &CacheUserServiceMockSetPartialExpectation{mock: mmSetPartial.mock}
	}
	mmSetPartial.defaultExpectation.results = &CacheUserServiceMockSetPartialResults{err}
	return mmSetPartial.mock
}

// Set uses given function f to mock the CacheUserService.SetPartial method
func (mmSetPartial *mCacheUserServiceMockSetPartial) Set(f func(ctx context.Context, id int64, user *model.UpdateUserInfo) (err error)) *CacheUserServiceMock {
	if mmSetPartial.defaultExpectation != nil {
		mmSetPartial.mock.t.Fatalf("Default expectation is already set for the CacheUserService.SetPartial method")
	}

	if len(mmSetPartial.expectations) > 0 {
		mmSetPartial.mock.t.Fatalf("Some expectations are already set for the CacheUserService.SetPartial method")
	}

	mmSetPartial.mock.funcSetPartial = f
	return mmSetPartial.mock
}

// When sets expectation for the CacheUserService.SetPartial which will trigger the result defined by the following
// Then helper
func (mmSetPartial *mCacheUserServiceMockSetPartial) When(ctx context.Context, id int64, user *model.UpdateUserInfo) *CacheUserServiceMockSetPartialExpectation {
	if mmSetPartial.mock.funcSetPartial != nil {
		mmSetPartial.mock.t.Fatalf("CacheUserServiceMock.SetPartial mock is already set by Set")
	}

	expectation := &CacheUserServiceMockSetPartialExpectation{
		mock:   mmSetPartial.mock,
		params: &CacheUserServiceMockSetPartialParams{ctx, id, user},
	}
	mmSetPartial.expectations = append(mmSetPartial.expectations, expectation)
	return expectation
}

// Then sets up CacheUserService.SetPartial return parameters for the expectation previously defined by the When method
func (e *CacheUserServiceMockSetPartialExpectation) Then(err error) *CacheUserServiceMock {
	e.results = &CacheUserServiceMockSetPartialResults{err}
	return e.mock
}

// Times sets number of times CacheUserService.SetPartial should be invoked
func (mmSetPartial *mCacheUserServiceMockSetPartial) Times(n uint64) *mCacheUserServiceMockSetPartial {
	if n == 0 {
		mmSetPartial.mock.t.Fatalf("Times of CacheUserServiceMock.SetPartial mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSetPartial.expectedInvocations, n)
	return mmSetPartial
}

func (mmSetPartial *mCacheUserServiceMockSetPartial) invocationsDone() bool {
	if len(mmSetPartial.expectations) == 0 && mmSetPartial.defaultExpectation == nil && mmSetPartial.mock.funcSetPartial == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSetPartial.mock.afterSetPartialCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSetPartial.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// SetPartial implements service.CacheUserService
func (mmSetPartial *CacheUserServiceMock) SetPartial(ctx context.Context, id int64, user *model.UpdateUserInfo) (err error) {
	mm_atomic.AddUint64(&mmSetPartial.beforeSetPartialCounter, 1)
	defer mm_atomic.AddUint64(&mmSetPartial.afterSetPartialCounter, 1)

	if mmSetPartial.inspectFuncSetPartial != nil {
		mmSetPartial.inspectFuncSetPartial(ctx, id, user)
	}

	mm_params := CacheUserServiceMockSetPartialParams{ctx, id, user}

	// Record call args
	mmSetPartial.SetPartialMock.mutex.Lock()
	mmSetPartial.SetPartialMock.callArgs = append(mmSetPartial.SetPartialMock.callArgs, &mm_params)
	mmSetPartial.SetPartialMock.mutex.Unlock()

	for _, e := range mmSetPartial.SetPartialMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSetPartial.SetPartialMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetPartial.SetPartialMock.defaultExpectation.Counter, 1)
		mm_want := mmSetPartial.SetPartialMock.defaultExpectation.params
		mm_want_ptrs := mmSetPartial.SetPartialMock.defaultExpectation.paramPtrs

		mm_got := CacheUserServiceMockSetPartialParams{ctx, id, user}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSetPartial.t.Errorf("CacheUserServiceMock.SetPartial got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmSetPartial.t.Errorf("CacheUserServiceMock.SetPartial got unexpected parameter id, want: %#v, got: %#v%s\n", *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

			if mm_want_ptrs.user != nil && !minimock.Equal(*mm_want_ptrs.user, mm_got.user) {
				mmSetPartial.t.Errorf("CacheUserServiceMock.SetPartial got unexpected parameter user, want: %#v, got: %#v%s\n", *mm_want_ptrs.user, mm_got.user, minimock.Diff(*mm_want_ptrs.user, mm_got.user))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSetPartial.t.Errorf("CacheUserServiceMock.SetPartial got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSetPartial.SetPartialMock.defaultExpectation.results
		if mm_results == nil {
			mmSetPartial.t.Fatal("No results are set for the CacheUserServiceMock.SetPartial")
		}
		return (*mm_results).err
	}
	if mmSetPartial.funcSetPartial != nil {
		return mmSetPartial.funcSetPartial(ctx, id, user)
	}
	mmSetPartial.t.Fatalf("Unexpected call to CacheUserServiceMock.SetPartial. %v %v %v", ctx, id, user)
	return
}

// SetPartialAfterCounter returns a count of finished CacheUserServiceMock.SetPartial invocations
func (mmSetPartial *CacheUserServiceMock) SetPartialAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetPartial.afterSetPartialCounter)
}

// SetPartialBeforeCounter returns a count of CacheUserServiceMock.SetPartial invocations
func (mmSetPartial *CacheUserServiceMock) SetPartialBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetPartial.beforeSetPartialCounter)
}

// Calls returns a list of arguments used in each call to CacheUserServiceMock.SetPartial.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetPartial *mCacheUserServiceMockSetPartial) Calls() []*CacheUserServiceMockSetPartialParams {
	mmSetPartial.mutex.RLock()

	argCopy := make([]*CacheUserServiceMockSetPartialParams, len(mmSetPartial.callArgs))
	copy(argCopy, mmSetPartial.callArgs)

	mmSetPartial.mutex.RUnlock()

	return argCopy
}

// MinimockSetPartialDone returns true if the count of the SetPartial invocations corresponds
// the number of defined expectations
func (m *CacheUserServiceMock) MinimockSetPartialDone() bool {
	if m.SetPartialMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SetPartialMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SetPartialMock.invocationsDone()
}

// MinimockSetPartialInspect logs each unmet expectation
func (m *CacheUserServiceMock) MinimockSetPartialInspect() {
	for _, e := range m.SetPartialMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CacheUserServiceMock.SetPartial with params: %#v", *e.params)
		}
	}

	afterSetPartialCounter := mm_atomic.LoadUint64(&m.afterSetPartialCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SetPartialMock.defaultExpectation != nil && afterSetPartialCounter < 1 {
		if m.SetPartialMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CacheUserServiceMock.SetPartial")
		} else {
			m.t.Errorf("Expected call to CacheUserServiceMock.SetPartial with params: %#v", *m.SetPartialMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetPartial != nil && afterSetPartialCounter < 1 {
		m.t.Error("Expected call to CacheUserServiceMock.SetPartial")
	}

	if !m.SetPartialMock.invocationsDone() && afterSetPartialCounter > 0 {
		m.t.Errorf("Expected %d calls to CacheUserServiceMock.SetPartial but found %d calls",
			mm_atomic.LoadUint64(&m.SetPartialMock.expectedInvocations), afterSetPartialCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CacheUserServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockDeleteInspect()

			m.MinimockGetInspect()

			m.MinimockGetListInspect()

			m.MinimockSetInspect()

			m.MinimockSetListInspect()

			m.MinimockSetPartialInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CacheUserServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CacheUserServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDeleteDone() &&
		m.MinimockGetDone() &&
		m.MinimockGetListDone() &&
		m.MinimockSetDone() &&
		m.MinimockSetListDone() &&
		m.MinimockSetPartialDone()
}
