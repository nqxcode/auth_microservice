name: Go

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main, week_1, week_2, week_3, week_4 ]

env:
  REGISTRY: "cr.selcloud.ru/nqxcode"
  IMAGE_NAME: "auth-microservice"
  CONTAINER_NAME: "auth-microservice"
  MIGRATION_IMAGE_NAME: "auth-microservice-migration"
  MIGRATION_CONTAINER_NAME: "auth-microservice-migration"
  POSTGRES_IMAGE_NAME: "postgres:14-alpine3.17"
  POSTGRES_CONTAINER_NAME: "auth-postgres"
  POSTGRES_VOLUME: "auth-postgres-volume"
  REDIS_IMAGE_NAME: "redis:7.2.5-alpine3.20"
  REDIS_CONTAINER_NAME: "auth-redis"
  REDIS_VOLUME: "auth-redis-volume"
  NETWORK: "auth-network"
  GRPC_PORT: "50051"
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v3

        - name: Set up Go
          uses: actions/setup-go@v4
          with:
            go-version: '1.22'
            cache-dependency-path: go.sum

        - name: Build
          run: go build -o ./bin/ -v ./...

        - name: Test
          run: go test -v ./...

  linter:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
          # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
          version: v1.60

          # Optional: working directory, useful for monorepos
          # working-directory: somedir

          # Optional: golangci-lint command line arguments.
          #
          # Note: By default, the `.golangci.yml` file should be at the root of the repository.
          # The location of the configuration file can be changed by using `--config=`
          args: --timeout=30m --config=./.golangci.pipeline.yaml

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional: if set to true, then all caching functionality will be completely disabled,
          #           takes precedence over all other caching options.
          # skip-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/go/pkg.
          # skip-pkg-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/.cache/go-build.
          # skip-build-cache: true

          # Optional: The mode to install golangci-lint. It can be 'binary' or 'goinstall'.
          # install-mode: "goinstall"

  image-build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout master
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Registry
        run: docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY

      - name: Build and Push Docker Image
        run: |
          TAG_NAME=$(echo $GITHUB_SHA | head -c7)
          docker buildx create --use
          docker buildx build --no-cache --push --tag $REGISTRY/$IMAGE_NAME:$TAG_NAME -f ./Dockerfile ./
          docker buildx build --no-cache --push --tag $REGISTRY/$MIGRATION_IMAGE_NAME:$TAG_NAME -f ./migration.Dockerfile ./


  deploy-image:
    runs-on: ubuntu-latest
    needs: image-build-and-push

    steps:
      - name: Deploy to Selectel Cloud via SSH action
        uses: appleboy/ssh-action@v1.0.0
        env:
          GITHUB_SHA: ${{ github.sha }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSHKEY }}
          script: |
            # Login into Selectel Registry
            docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} ${{ env.REGISTRY }}
            
            cat <<EOF > .env.auth
            TAG_NAME=$(echo ${{ env.GITHUB_SHA }} | head -c7)            
            REGISTRY=${{ env.REGISTRY }}
            IMAGE_NAME=${{ env.IMAGE_NAME }}
            CONTAINER_NAME=${{ env.CONTAINER_NAME }}
            MIGRATION_IMAGE_NAME=${{ env.MIGRATION_IMAGE_NAME }}
            MIGRATION_CONTAINER_NAME=${{ env.MIGRATION_CONTAINER_NAME }}
            POSTGRES_IMAGE_NAME=${{ env.POSTGRES_IMAGE_NAME }}
            POSTGRES_CONTAINER_NAME=${{ env.POSTGRES_CONTAINER_NAME }}
            POSTGRES_VOLUME=${{ env.POSTGRES_VOLUME }}
            NETWORK=${{ env.NETWORK }}
            GRPC_PORT=${{ env.GRPC_PORT }}
            MIGRATION_DSN="${{ secrets.MIGRATION_DSN }}"
            PG_DSN="${{ secrets.PG_DSN }}"
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            HASHING_SALT="${{ secrets.HASHING_SALT }}"
            REDIS_IMAGE_NAME="${{ env.REDIS_IMAGE_NAME }}"
            REDIS_CONTAINER_NAME="${{ env.REDIS_CONTAINER_NAME }}"
            REDIS_CONNECTION_TIMEOUT_SEC="${{ secrets.REDIS_CONNECTION_TIMEOUT_SEC }}"
            REDIS_DB="${{ secrets.REDIS_DB }}"
            REDIS_IDLE_TIMEOUT_SEC="${{ secrets.REDIS_IDLE_TIMEOUT_SEC }}"
            REDIS_MAX_IDLE="${{ secrets.REDIS_MAX_IDLE }}"
            REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}"
            REDIS_VOLUME="${{ env.REDIS_VOLUME }}"
            REDIS_PORT="${{ secrets.REDIS_PORT }}"
            EOF
            
            source .env.auth
            
            cat <<EOF > docker-compose.auth.yaml
            
            version: '3'
            volumes:
              ${POSTGRES_VOLUME}:
            
            networks:
              ${NETWORK}:
                driver: bridge

            services:
              postgres-auth:
                image: ${POSTGRES_IMAGE_NAME}
                container_name: ${POSTGRES_CONTAINER_NAME}
                environment:
                  POSTGRES_USER: ${POSTGRES_USER}
                  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
                  POSTGRES_DB: ${POSTGRES_DB}
                volumes:
                  - ${POSTGRES_VOLUME}:/var/lib/postgresql/data
                networks:
                  - ${NETWORK}

              redis-auth:
                image: ${REDIS_IMAGE_NAME}
                container_name: ${REDIS_CONTAINER_NAME}
                command: >
                  --requirepass ${REDIS_PASSWORD}
                volumes:
                  - ${REDIS_VOLUME}:/data
                networks:
                  - ${NETWORK}
            
              migrator-auth:
                image: ${REGISTRY}/${MIGRATION_IMAGE_NAME}:${TAG_NAME}
                container_name: ${MIGRATION_CONTAINER_NAME}
                environment:
                  MIGRATION_DIR: ./migrations
                  MIGRATION_DSN: "${MIGRATION_DSN}"
                networks:
                  - ${NETWORK}
                depends_on:
                  - postgres-auth
                restart: on-failure

              app-auth:
                image: ${REGISTRY}/${IMAGE_NAME}:${TAG_NAME}
                container_name: ${CONTAINER_NAME}
                environment:
                  PG_DSN: "${PG_DSN}"
                  GRPC_HOST: 0.0.0.0
                  GRPC_PORT: ${GRPC_PORT}
                  HASHING_SALT: ${HASHING_SALT}
                  REDIS_CONNECTION_TIMEOUT_SEC: ${REDIS_CONNECTION_TIMEOUT_SEC}
                  REDIS_DB: ${REDIS_DB}
                  REDIS_HOST: 0.0.0.0
                  REDIS_IDLE_TIMEOUT_SEC: ${REDIS_IDLE_TIMEOUT_SEC}
                  REDIS_MAX_IDLE: ${REDIS_MAX_IDLE}
                  REDIS_PASSWORD: ${REDIS_PASSWORD}
                  REDIS_PORT: ${REDIS_PORT}
                ports:
                  - "${GRPC_PORT}:${GRPC_PORT}"
                networks:
                  - ${NETWORK}
                depends_on:
                  - postgres-auth
                  - redis-auth
                  - migrator-auth

            EOF
            
            docker compose -f docker-compose.auth.yaml down
            docker compose -f docker-compose.auth.yaml up -d
