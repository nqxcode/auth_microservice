syntax = "proto3";

package auth_v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "validate/validate.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/nqxcode/auth_microservice/pkg/auth_v1;auth_v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Auth API"
    version: "1.0.0"
    contact: {
      name: "Andrey Pokoev"
      email: "nc101ux@gmail.ru"
    };
  };

  host: "localhost:8080",
  schemes: HTTP,
  schemes: HTTPS,
  consumes: "application/json",
  produces: "application/json",
};

service AuthV1 {
  rpc Create(CreateRequest) returns (CreateResponse) {
    option (google.api.http) = {
      post: "/auth/v1/create"
      body: "*"
    };
  };
  rpc Get(GetRequest) returns (GetResponse) {
    option (google.api.http) = {
      get: "/auth/v1/get"
    };
  };
  rpc GetList(GetListRequest) returns (GetListResponse) {
    option (google.api.http) = {
      get: "/auth/v1/get-list"
    };
  };
  rpc Update(UpdateRequest) returns (google.protobuf.Empty) {
    option(google.api.http) = {
      patch: "/auth/v1/update"
    };
  };
  rpc Delete(DeleteRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/auth/v1/delete"
    };
  }
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      get: "/auth/v1/login"
    };
  };
  rpc GetRefreshToken(GetRefreshTokenRequest) returns (GetRefreshTokenResponse) {
    option (google.api.http) = {
      get: "/auth/v1/get-refresh-token"
    };
  };
  rpc GetAccessToken(GetAccessTokenRequest) returns (GetAccessTokenResponse) {
    option (google.api.http) = {
      get: "/auth/v1/get-access-token"
    };
  };
  rpc Check(CheckRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get: "/auth/v1/check"
    };
  };
}

message UserInfo {
  string name = 1 [(validate.rules).string = {min_len: 1, max_len: 50}];
  string email = 2 [(validate.rules).string = {email: true}];
  Role role = 3 [(validate.rules).enum = {defined_only: true, in: [0, 1, 2]}];
}

enum Role {
  UNKNOWN = 0;
  ADMIN = 1;
  USER = 2;
}

message User {
  int64 id = 1;
  UserInfo info = 2;
  google.protobuf.Timestamp created_at = 3;
  google.protobuf.Timestamp updated_at = 4;
}

message UpdateUserInfo {
  google.protobuf.StringValue name = 1 [(validate.rules).string = {min_len: 1, max_len: 50}];
  Role role = 2 [(validate.rules).enum = {defined_only: true, in: [0, 1, 2]}];
}

message CreateRequest {
  UserInfo info = 1 [(validate.rules).message.required = true];
  string password = 3 [(validate.rules).string = {min_len: 1, max_len: 128}];
  string password_confirm = 4 [(validate.rules).string = {min_len: 1, max_len: 128}];
}

message CreateResponse {
  int64 id = 1;
}

message GetRequest {
  int64 id = 1 [(validate.rules).int64 = {gt: 0}];
}

message GetResponse {
  User user = 1;
}

message UpdateRequest {
  int64 id = 1 [(validate.rules).int64 = {gt: 0}];
  UpdateUserInfo info = 2 [(validate.rules).message.required = true];
}

message DeleteRequest {
  int64 id = 1 [(validate.rules).int64 = {gt: 0}];
}

message Limit {
  uint64 offset = 1 [(validate.rules).uint64 = {gte: 0}];
  uint64 limit = 2 [(validate.rules).uint64 = {gte: 1, lte: 1000}];
}

message GetListRequest {
  Limit limit = 1 [(validate.rules).message.required = true];
}

message GetListResponse {
  repeated User users = 1;
}

message LoginRequest {
  string email = 1;
  string password = 2;
}

message LoginResponse {
  string refresh_token = 1;
}

message GetRefreshTokenRequest {
  string old_refresh_token = 1;
}

message GetRefreshTokenResponse {
  string refresh_token = 1;
}

message GetAccessTokenRequest {
  string refresh_token = 1;
}

message GetAccessTokenResponse {
  string access_token = 1;
}

message CheckRequest {
  string endpoint_address = 2;
}
